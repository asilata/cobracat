#+title: Expansive cone calculations
#+author: Asilata Bapat and Anand Deopurkar and Anthony M. Licata
#+property: header-args:sage :session foo

* Preconfiguration                                                 :noexport:
** Startup
#+startup: noptag overview inlineimages
#+property: header-args:sage :eval no-export :session

** LaTeX setup
#+options: toc:nil ':t
#+latex_header: \usepackage{svg}
#+latex_header_extra: \usepackage[margin=1in]{geometry}

* The \(D_{4}\) case
Our first example is the \(D_{4}\) case.
# #+begin_src dot :cmd neato :file d4.svg :results file
  graph {
      1 -- x;
      2 -- x;
      3 -- x;
  }
#+end_src

#+attr_latex: :width 0.3\linewidth
#+RESULTS:
[[file:d4.svg]]

Recall that \(D_{4}\) has four simple roots, one for each vertex.
We denote these as \(r_1, r_2, r_3\) for the three outside vertices, and \(r_x\) for the central vertex.
The other positive roots are certain positive integral linear combinations of the four simple ones.
#+begin_src sage :results silent
  simple_root_labels_d4 = ['1', '2', '3', 'x']
  simple_roots_d4 = vector([var('r' + l) for l in simple_root_labels_d4])
  root_matrix_d4 = matrix([[1,0,0,0],
                           [0,1,0,0],
                           [0,0,1,0],
                           [0,0,0,1],
                           [1,0,0,1],
                           [0,1,0,1],
                           [0,0,1,1],
                           [1,1,0,1],
                           [1,0,1,1],
                           [0,1,1,1],
                           [1,1,1,1],
                           [1,1,1,2]])
#+end_src

** Simple roots
Create variables that represent coordinates for the velocity vectors of the simple roots.
Collect them into a list.
#+begin_src sage :results silent
  simple_velocities_d4 = matrix([[var('a' + l), var('b' + l)] for l in simple_root_labels_d4])
#+end_src

** Initialise central charge
Set certain initial values for the central charges. These are (at the moment) pretty arbitrary.
For now we assume again that we work with \(D_{4}\), but this may change in the future.
Also collect the "simple" central charges into a vector.

The following function constructs a random central charge vector with \(x\) coordinate a random integer somewhere between \(-15\) and \(15\), and \(y\) coordinate a random integer between \(1\) and \(15\).
#+begin_src sage :results silent
  def random_cc():
    a = randint(-15,15)
    b = randint(1,15)
    return vector([a,b])
#+end_src

#+begin_src sage :results silent :cache yes
  #z1 = [3,2]
  #z2 = [-1,4]
  #z3 = [-2,1]
  #zx = [4,7]
  #z1, z2, z3, zx = random_cc(), random_cc(), random_cc(), random_cc()
  z1, z2, z3, zx = vector([-2,1]), vector([-2,2]), vector([-1,2]), vector([20,1])
  simple_central_charges_d4 = matrix([eval('z' + l) for l in simple_root_labels_d4])
#+end_src

* Initialise values corresponding to all roots
For now we will only compute with the \(D_4\) case, so we set all variables to use the \(D_4\) versions.
#+begin_src sage :results silent
  simple_roots = simple_roots_d4
  root_matrix = root_matrix_d4
  simple_central_charges = simple_central_charges_d4
  simple_velocities = simple_velocities_d4
#+end_src

Finally, compute everything for all of the positive roots.
#+begin_src sage :results silent
  positive_roots = root_matrix * simple_roots
  positive_central_charges = root_matrix * simple_central_charges
  positive_velocities = root_matrix * simple_velocities
#+end_src

* The expansive inequalities
The various inequalities are of the form \(\langle z, v \rangle \ge 0\), where \(z\) is a central charge vector and \(v\) is the corresponding velocity vector.
We create a list of inequalities (in a form acceptable to sage), and then construct a polyhedron defined by these inequalities over \(\mathbb{Q}\).
#+begin_src sage
  def eq_to_ieq(expr):
       return [0] + [expr.coefficient(x) for x in simple_velocities.list()]

  ineqs = [eq_to_ieq(x.dot_product(y)) for (x,y) in zip(positive_velocities, positive_central_charges)]

  P = Polyhedron(ieqs = ineqs, base_ring=QQ)
#+end_src

#+RESULTS:

** Computations on extremal rays
Recall that an extremal ray consists of the \(x\) and \(y\) coordinates for each of the velocity vectors.
The following function converts an extremal ray into a matrix of velocities, by splitting the list into pieces of size \(2\) and then converting the output into a matrix.
#+begin_src sage :results silent
  def ray_to_velocity_matrix(r):
      return matrix([r[i:i+2] for i in range(0,len(r),2)])
#+end_src

A matrix of velocities corresponding to an extremal ray specifies how each point moves so that we get an infinitesimally expansive motion.
The central charge vectors that remain rigid (do not expand) are exactly the ones whose velocity vector have zero dot product with the corresponding central charge vector.
The collection of these central charge vectors forms (the closure of) a state, namely the appropriate analogue of a pointed pseudo-triangulation without an external edge.
Among these, some subcollections form rigid components: these are distinguished by the fact that they all have the same ratio of the length of the velocity vector to the length of the central charge vector.

The following function produces a list of rigid components given an extremal ray.
#+begin_src sage
  def rigid_components(r):
      velocities = root_matrix * ray_to_velocity_matrix(r)
      rigid_roots_ratios = [(r,x.norm()/y.norm())
                            for (r,x,y) in zip(positive_roots,velocities, positive_central_charges) if x.dot_product(y) == 0]
      unique_ratios = set(t[1] for t in rigid_roots_ratios)
      components = []
      for ratio in unique_ratios:
          this_component = []
          for t in rigid_roots_ratios:
              if t[1] == ratio:
                  this_component.append(t[0])
          components.append(this_component)

      return components
#+end_src

#+RESULTS:

* Results
First we draw the stability condition we have constructed.
#+begin_src sage :results file :exports both
  sum([plot(x) + text(y, x + vector([0,0.5]))
       for (x,y) in zip(positive_central_charges, positive_roots)])
#+end_src

#+RESULTS:
[[file:/home/anandrd/.sage/temp/proteus/284357/tmp_bfk41_gr.png]]

Next we compute the rigid components for each of the extremal rays of the polyhedron \(P\).
#+begin_src sage :exports both
  collapsed_components = [rigid_components(r) for r in P.ray_generator()]
  collapsed_states = [flatten(x) for x in collapsed_components]
  collapsed_states
#+end_src

#+RESULTS:
#+begin_example
[[r1, r3, rx, r1 + rx, r3 + rx, r1 + r3 + rx, r2 + rx],
 [r1, r2, r3 + rx, r1 + r3 + rx, r2 + r3 + rx, r1 + r2 + r3 + rx, r3],
 [r1,
  r2,
  r3 + rx,
  r1 + r3 + rx,
  r2 + r3 + rx,
  r1 + r2 + r3 + rx,
  r1 + r2 + rx],
 [r2,
  r3,
  r1 + rx,
  r1 + r2 + rx,
  r1 + r3 + rx,
  r1 + r2 + r3 + rx,
  r2 + r3 + rx],
 [r1,
  r2 + rx,
  r3 + rx,
  r1 + r2 + rx,
  r1 + r3 + rx,
  r1 + r2 + r3 + 2*rx,
  r2 + r3 + rx],
 [r2, r3, r1 + rx, r1 + r2 + rx, r1 + r3 + rx, r1 + r2 + r3 + rx, r1],
 [r2, r1, r3, rx, r1 + rx, r3 + rx, r1 + r3 + rx],
 [r3 + rx,
  r3,
  r1 + rx,
  r2 + rx,
  r1 + r3 + rx,
  r2 + r3 + rx,
  r1 + r2 + r3 + 2*rx],
 [r1 + r2 + rx,
  r3,
  r1 + rx,
  r2 + rx,
  r1 + r3 + rx,
  r2 + r3 + rx,
  r1 + r2 + r3 + 2*rx],
 [r1 + rx,
  r1,
  r2 + rx,
  r3 + rx,
  r1 + r2 + rx,
  r1 + r3 + rx,
  r1 + r2 + r3 + 2*rx],
 [r2, r1, r3, r2 + rx, r1 + r2 + rx, r2 + r3 + rx, r1 + r2 + r3 + rx],
 [r2, r1 + rx, r1 + r2 + rx, r3, r2 + rx, r2 + r3 + rx],
 [r2, r3, rx, r2 + rx, r3 + rx, r2 + r3 + rx, r1],
 [r2, r3 + rx, r2 + r3 + rx, r1, r2 + rx, r1 + r2 + rx],
 [r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3 + rx],
 [r2, r3, rx, r2 + rx, r3 + rx, r2 + r3 + rx, r1 + rx],
 [r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3],
 [r2,
  r1 + rx,
  r3 + rx,
  r1 + r2 + rx,
  r2 + r3 + rx,
  r1 + r2 + r3 + 2*rx,
  r2 + rx],
 [r2,
  r1 + rx,
  r3 + rx,
  r1 + r2 + rx,
  r2 + r3 + rx,
  r1 + r2 + r3 + 2*rx,
  r1 + r3 + rx],
 [r3, r1 + rx, r1 + r3 + rx, r1, r2 + rx, r1 + r2 + rx],
 [r2, r3 + rx, r2 + r3 + rx, r3, r1 + rx, r1 + r3 + rx],
 [r2, r1 + rx, r1 + r2 + rx, r1, r3 + rx, r1 + r3 + rx],
 [r1, r3 + rx, r1 + r3 + rx, r3, r2 + rx, r2 + r3 + rx],
 [r1,
  r3,
  r2 + rx,
  r1 + r2 + rx,
  r2 + r3 + rx,
  r1 + r2 + r3 + rx,
  r1 + r3 + rx]]
#+end_example

*** Testing whether some supports lie in the states
#+begin_src sage
  [s for s in collapsed_states if r1 in s and rx in s and r2 in s and r3+rx in s]
#+end_src

#+RESULTS:
: [[r2, r1, r3, rx, r1 + rx, r3 + rx, r1 + r3 + rx],
:  [r2, r3, rx, r2 + rx, r3 + rx, r2 + r3 + rx, r1],
:  [r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3 + rx]]

** CANCELLED Imposing rigidity equations to resolve rigid components
Let us write down the "rigidity equations". These are equations that specify, for each root, that the length of that root does not change under a given motion.
The flavour of this equation is \(\langle v_{\alpha}, z_{\alpha} \rangle = 0\), as opposed to just positive as in the usual equation.
In fact, in the sage representation, these are exactly the same as the inequalities; they simply need to be specified as equations rather than inequalities.
#+begin_src sage
  rigidity_equations = ineqs
#+end_src

#+RESULTS:

Now if we consider a rigid component, we can get out states from it as follows.
Take 6-element subsets of a given rigid component, and intersect the corresponding rigidity equations with the polyhedron \(P\).
The chosen 6-element subset is a state if and only if the intersection is a single ray (?).
NOTE: This does not work.
#+begin_src sage
  import itertools
  def rigid_component_to_states(c):
      states = []
      for subcpt in itertools.combinations(c, 6):
          print(subcpt)
          eqns = []
          for r in subcpt:
              index = list(positive_roots).index(r)
              e = rigidity_equations[index]
              eqns = eqns + [rigidity_equations[index]]
          print(P.intersection(Polyhedron(eqns = eqns, base_ring = QQ)))
#+end_src

#+RESULTS:

** Resolving rigid components via crossing pairs
Let us find crossing pairs in a state as follows: take \(2\)-element subsets of the state that appear together in no other state except one (namely the external flip of the external edge).
#+begin_src sage
  def crossing_pairs(s):
      for pair in itertools.combinations(s,2):
          for t in collapsed_states:
              containers = [t for t in collapsed_states if set(pair).issubset(t) if s != t]
              if len(containers) == 1:
                  return pair
      return None
#+end_src

#+RESULTS:

Given a collapsed state, now produce states from it by removing one element of a crossing pair at a time.
#+begin_src sage
  def collapsed_state_to_states(s):
      pair = crossing_pairs(s)
      if pair is not None:
          states = [[x for x in s if x != y] for y in pair]
          return states
      else:
          return [s]

  states_list = [collapsed_state_to_states(t) for t in collapsed_states]
  all_states = [item for sl in states_list for item in sl]
#+end_src

#+RESULTS:

#+begin_src sage
  [y for y in collapsed_states if r1 + r2 + r3 + rx in y if r1 + rx in y if r1 in y]
#+end_src

#+RESULTS:
: [[r2, r3, r1 + rx, r1 + r2 + rx, r1 + r3 + rx, r1 + r2 + r3 + rx, r1]]

Now for any state (flattening of a list of rigid components), we find its neighbours.
These are precisely all the other states whose intersection with the current state has all but one of the elements from the current state.
#+begin_src sage :results silent
  def are_neighbours(s,t):
      if s == t:
          return False
      if len(s) != len(t):
          return False
      commons = set(s) & set(t)
      s1 = set(s).difference(commons)
      if len(s1) == 1:
          return True
      else:
          return False

  def state_neighbours(s):
      nbs = []
      for t in all_states:
          if s == t:
              continue
          else:
              if are_neighbours(s,t):
                  nbs = nbs + [t]
      return nbs
  all_neighbours = [(s,state_neighbours(s)) for s in all_states]
#+end_src

#+begin_src sage :results silent
  state_graph = Graph()
  for i in range(0,len(all_states)):
      for j in range(0,len(all_states)):
          if are_neighbours(all_states[i],all_states[j]):
              state_graph.add_edge(i+1,j+1)
#+end_src

#+name: state_graph
#+begin_src sage :results file :exports results
  state_graph.plot()
#+end_src

#+attr_latex: :width 0.7\textwidth
#+caption: The flip graph of states.
#+RESULTS: state_graph
[[file:/home/anandrd/.sage/temp/proteus/284357/tmp_icff_t8w.png]]

We compute the "flip graph", which connects two roots if and only if one flips to the other in some pair of adjacent states.
#+begin_src sage :results silent
  flipgraph = Graph()
  for s in all_states:
      for t in all_states:
          if are_neighbours(s,t):
              commons = set(s) & set(t)
              s1 = list(set(s).difference(commons))
              t1 = list(set(t).difference(commons))
              if len(s1) == 1 and len(t1) == 1:
                  flipgraph.add_edge(s1[0],t1[0])
#+end_src

#+RESULTS:
[[file:/home/asilata/.sage/temp/peanut/45179/tmp_rms6bo0i.png]]
  
#+begin_src sage :results file :exports results
  flipgraph.plot()
#+end_src

#+RESULTS:
[[file:/home/anandrd/.sage/temp/proteus/284357/tmp_9qy8a33e.png]]

In Figure ref:cpg we plot the graph of crossing pairs. This connects two roots if and only if they both appear as the constituents of a crossing pair in one of the collapsed states (aka rigid components).
#+begin_src sage
  crossing_pairs_graph = Graph()
  for s in collapsed_states:
      if len(s) <= 6:
          continue
      p = crossing_pairs(s)
      crossing_pairs_graph.add_edge(p[0],p[1])
#+end_src

#+RESULTS:

#+name: crossing_pairs_graph
#+begin_src sage :results file :exports results
  crossing_pairs_graph.plot()
#+end_src

#+caption: The graph of crossing edges in the rigid components. label:cpg
#+RESULTS: crossing_pairs_graph
[[file:/home/anandrd/.sage/temp/proteus/284357/tmp_n6q878yc.png]]

** Test computation for a single extremal ray
#+begin_src sage
  test_simple_velocities = ray_to_velocity_matrix(P.rays()[11])
  test_positive_velocities = root_matrix * test_simple_velocities
  test_dot_products =  [x.dot_product(y) for (x,y) in zip(test_positive_velocities,positive_central_charges)]

  central_charge_lengths = [vector(x).norm() for x in positive_central_charges]
  test_velocity_lengths = [x.norm() for x in test_positive_velocities]
  test_length_ratios = [x/y for (x,y) in zip(test_velocity_lengths, central_charge_lengths)]
#+end_src

#+RESULTS:

#+begin_src sage
  list(zip(positive_roots, test_positive_velocities, test_length_ratios, test_dot_products))
#+end_src

#+RESULTS:
#+begin_example
[(r1, (-3, 18), 3/5*sqrt(37)*sqrt(5), 24),
 (r2, (0, 0), 0, 0),
 (r3, (2, 1), 1, 0),
 (rx, (3, -18), 3/401*sqrt(401)*sqrt(37), 42),
 (r1 + rx, (0, 0), 0, 0),
 (r2 + rx, (3, -18), 1, 0),
 (r3 + rx, (5, -17), 1/370*sqrt(370)*sqrt(314), 44),
 (r1 + r2 + rx, (0, 0), 0, 0),
 (r1 + r3 + rx, (2, 1), 1/305*sqrt(305)*sqrt(5), 38),
 (r2 + r3 + rx, (5, -17), 1, 0),
 (r1 + r2 + r3 + rx, (2, 1), 1/87*sqrt(29)*sqrt(5), 36),
 (r1 + r2 + r3 + 2*rx, (5, -17), 1/182*sqrt(314)*sqrt(26), 56)]
#+end_example


#+begin_src sage :results file
  alpha1 = vector(z2) + vector(zx)
  alpha2 = vector(z1)
  alpha3 = vector(z3) + vector(zx)
  polygon([(0,0), alpha1, alpha1 + alpha2, alpha1 + alpha2 + alpha3])
  #plot(alpha1) + plot(alpha1 + alpha2) + plot(alpha1 + alpha2 + alpha3)
#+end_src

#+RESULTS:
[[file:/home/anandrd/.sage/temp/proteus/284357/tmp__3hrv64h.png]]

* Self-stresses for an arbitrary root system
Let \(\Delta^+\) be the set of positive (real) roots of some root system.
Choose a central charge \(z\) on \(\Delta^+\).
A /self-stress/ on \(\Delta^+\) is an assignment \(\alpha \mapsto \omega_\alpha\) from \(\Delta^+\) to \(\mathbb{R}_{+}\), such that
\[\sum_{\alpha \in \Delta^+} \omega_{\alpha}z_{\alpha} = 0.\]

* Polytope of pointed pseudo-triangulations
For \(A_{n}\) type, we know that a choice of \(f_{ij}\) given by
\[f_{ij} = \det(a,p_i,p_j)\det(b,p_i,p_j)\]
is a valid choice of parameters.
In fact, we usually set \(a = b = 0\).

Recall that the \(D_n\) root system can be embedded into Euclidean space as follows.
Set the simple roots to be \(\{e_i - e_{i+1} \mid 1 \leq i < n\} \cup \{e_{n-1} + e_n\}\).
Then the positive roots are given by \(\{e_i \pm e_j \mid 1 \leq i < j \leq n \}\).

Naively, if \(\alpha = e_i \pm e_j\), set
\[f_{\alpha} = \det|e_i, \pm e_j|^2.\]
#+begin_src sage
  es = matrix([[1,-1,0,0],[0,0,1,-1],[0,0,1,1],[0,1,-1,0]]).inverse() * simple_central_charges_d4
  #root_matrix_d4 * simple_roots
  # smoothing_function_dict = {}
  # for i in range(0,4):
  #     for j in range(i+1,4):
  #         for (r,z) in zip(positive_roots,positive_central_charges):
  #             if z == es[i] - es[j]:
  #                 smoothing_function_dict[r] = matrix([es[i],es[j]]).determinant()^2
  #             elif z == es[i] + es[j]:
  #                 smoothing_function_dict[r] = matrix([es[i],-es[j]]).determinant()^2

  def random_smoothing():
    a = randint(-10,10)/10
    b = randint(-10,10)/10
    return vector([a,b])

  random_smoothings = [matrix([z,random_smoothing()]).determinant()^2 for z in positive_central_charges]
#+end_src

#+RESULTS:

#+RESULTS:
#+begin_example
[9/100,
 1681/25,
 3249/25,
 3136/25,
 961/25,
 4,
 12769/100,
 3844/25,
 1296,
 1156/25,
 16,
 184041/100]
#+end_example

#+begin_src sage
  def eq_to_inhom_ieq(expr, d):
    return [-d] + [expr.coefficient(x) for x in simple_velocities.list()]

  inhomogeneous_ineqs = [eq_to_inhom_ieq(x.dot_product(y),s) for (x,y,s) in zip(positive_velocities, positive_central_charges, random_smoothings)]
  # inhomogeneous_ineqs
  Pinhom = Polyhedron(ieqs = inhomogeneous_ineqs, base_ring=QQ)
  Pinhom
  Pinhom.vertices()
#+end_src

#+RESULTS:
#+begin_example
A 8-dimensional polyhedron in QQ^8 defined as the convex hull of 22 vertices, 24 rays, 1 line (use the .plot() method to plot)
(A vertex at (-1067571/308000, 2871371/22000, 731993/30800, 771417/30800, 0, 405259/2464, 1434057/61600, -4725381/15400),
 A vertex at (-1457/975, -1949/780, -489857/27300, -454913/27300, 0, 361/200, 132427/54600, 1504939/13650),
 A vertex at (3577799/184800, 144923/3696, 731993/30800, 771417/30800, 0, 405259/2464, 1434057/61600, -4725381/15400),
 A vertex at (-6639601/273000, 12122207/136500, -489857/27300, -454913/27300, 0, 361/200, 132427/54600, 1504939/13650),
 A vertex at (-8683/1800, -4121/450, 2761/6300, 433/252, 0, 361/200, 218471/12600, -44801/2100),
 A vertex at (-18027361/1577000, 3774943/157700, -3851/9500, 8309/9500, 0, 361/200, 11155791/1577000, 272487/15770),
 A vertex at (-1211627/98800, 501133/12350, -462861/19760, 1147929/12350, 0, 361/200, 781119/98800, 15777/24700),
 A vertex at (-2451521/155800, 8569777/77900, 1427959/90200, 308683/18040, 0, 361/200, 93297/8200, -141027/2050),
 A vertex at (-2451521/155800, 8569777/77900, -358386/13325, 8654967/53300, 0, 361/200, 93297/8200, -141027/2050),
 A vertex at (16163947/1760000, 16595147/880000, 18086139/880000, 19212539/880000, 0, 173524899/1760000, 32489217/1760000, -18518337/88000),
 A vertex at (1457069/166000, 1497739/83000, -9713/5000, 1572651/16600, 0, 67998321/830000, 14309343/830000, -7720803/41500),
 A vertex at (-2089/160, 443621/2800, 1217/700, 41787/280, 0, 845031/5600, 224487/5600, -31977/80),
 A vertex at (-118133/31400, -5522/785, -8287/494550, 624737/494550, 0, 361/200, 14197669/1978200, 7526413/494550),
 A vertex at (-1457/975, -1949/780, -11594621/491400, 23677733/245700, 0, 361/200, 1984519/245700, -170762/61425),
 A vertex at (-899513/462000, 366921/5500, 598513/28875, 635473/28875, 0, 47210479/462000, 2883299/154000, -1660847/7700),
 A vertex at (-25231/6280, 1149479/15700, -257/785, 1418643/15700, 0, 2735313/31400, 553257/31400, -1520019/7850),
 A vertex at (321583/27500, 656641/27500, 1144971/27500, 1180171/27500, 0, 5541201/27500, 178677/6875, -496413/1375),
 A vertex at (321583/27500, 656641/27500, -9713/5000, 5973741/27500, 0, 5541201/27500, 178677/6875, -496413/1375),
 A vertex at (-97461/10450, -379603/20900, -3851/9500, 8309/9500, 0, 361/200, 103853/20900, 310256/5225),
 A vertex at (-97461/10450, -379603/20900, -1838501/41800, 3661393/20900, 0, 361/200, 103853/20900, 310256/5225),
 A vertex at (1398789/205000, 724507/51250, 1427959/90200, 308683/18040, 0, 361/200, 93297/8200, -141027/2050),
 A vertex at (1398789/205000, 724507/51250, -358386/13325, 8654967/53300, 0, 361/200, 93297/8200, -141027/2050))
#+end_example



