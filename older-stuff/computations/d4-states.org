#+property: header-args:sage :tangle "d4-states.sage" :session d4-states :eval never-export :exports both
#+title: Pointed pseudo-triangulations and states for an arbitrary Cartan type 

* Introduction
We explain how to set up the calculation of "Harder--Narasimhan states" via homological constraints as well as constraints coming from expansive motions of central charges.
We write down some specific examples for type \(D_4\).

* General setup
Load libraries.
#+begin_src sage :results silent
  import itertools
  load("setup_cartan.sage")
#+end_src

Now we write a function called ~setup_cartan_type~ that sets up the following, given a Cartan type ~ct~.
This function should usually be run after setting ~CT~ globally to be the Cartan type of interest; otherwise it needs an argument ~ct~.

All functions beyond this point will assume that the globals that this function defines have been set up.
In other words, while running, we should
1. first define ~CT~, or pass it to ~setup_cartan_type~
2. run ~setup_cartan_type~, and only then
3. run anything else in this file.

The function ~setup_cartan_type~ sets up the following global variables.
- ~PROJ~ is a dictionary of the indecomposable projectives, indexed by ~INDICES~.
- ~TWIST~ is a dictionary of the spherical twists and their inverses, indexed by ~INDICES~ as well as ~-INDICES~.
- ~SIMPLES~ is a family of simple roots indexed by ~INDICES~.
- ~INDICES~ is an iterable of the indices of the family of the simple roots.  
- ~POSITIVES~ is a recursively enumerated set containing the positive roots of ~CT~.
- ~ROOT_MATRIX~ is a matrix whose rows are indexed by the ~POSITIVES~. The row corresponding to a positive root \(\alpha\) is the vector of coefficients of \(\alpha\) with respect to each simple root in the order of ~INDICES~.

  #+begin_src sage :results silent
    def setup_cartan_type(ct):
        """
        Set up global constants for a given CartanType, default the globally defined ~CT~.
            
        INPUT:
            
        - `ct` -- a CartanType
        
        OUTPUT:
        
        None, but define the global constants `INDICES`, `PROJ`, `TWIST`, `SIMPLES`, `POSITIVES`, `ROOT_MATRIX`.
        """

        global INDICES, PROJ, TWIST, SIMPLES, POSITIVES, ROOT_MATRIX
        
        PROJ, TWIST, _ = zz_setup(CT)
        SIMPLES = CT.root_system().root_lattice().simple_roots()
        INDICES = SIMPLES.keys()
        POSITIVES = CT.root_system().root_lattice().positive_roots()
        ROOT_MATRIX = matrix([[r.coefficient(i) for i in INDICES] for r in POSITIVES])
        
        return None
#+end_src

** Debugging
#+begin_src sage :results silent
  DEBUG = False
#+end_src

** Useful helper functions
A helper function to compute the root class of any given projective complex.
#+begin_src sage :results silent
  def obj_to_root(obj):
      """
      Return the root class of a ProjectiveComplex.

      INPUT:

      - `obj` -- a ProjectiveComplex over the zigzag algebra of type CT.

      OUTPUT:

      The root of the CartanType `CT` that is the class of `obj` in the Grothendieck group.

      EXAMPLES:
          sage: obj_to_root(PROJ[1])
          sage: alpha[1]
      """
      
      proj_dict = dict([(k,0) for k in PROJ.keys()])

      for d in range(obj.minIndex(), obj.maxIndex()+1):
          for x in obj.objects(d):
              proj_key = x._i
              proj_dict[proj_key] = proj_dict[proj_key] + (-1)**(d - x.twist())
              
      return sum([proj_dict[k] * SIMPLES[k] for k in proj_dict])
#+end_src

A helper function to return a short name for a root.
#+begin_src sage :results silent
  def short_name_from_root(root):
      """
      Return a short string representation of the given root.

      INPUT:

      - `root` -- a root of the root lattice of CT.

      OUTPUT:

      A string consisting of the coefficients of the simples in the given root.

      EXAMPLE:

          sage: short_name_from_root(SIMPLES[1])
          sage: '1000'
          sage: short_name_from_root(SIMPLES[2])
          sage: '0100'
      """
      return "".join([str(root.coefficient(i)) for i in INDICES])
#+end_src

A helper function to print a short name for an object.
#+begin_src sage :results silent
  def short_name(obj):
      """
      Return a short string representation of the root class of a given object.

      INPUT:

      - `obj` -- a ProjectiveComplex over the zigzag algebra of type CT.

      OUTPUT:

      A string consisting of the coefficients of the simples in the root class of `obj`.

      EXAMPLE:

          sage: short_name(PROJ[1])
          sage: '1000'
          sage: short_name_from_root(PROJ[2])
          sage: '0100'
      """
      return short_name_from_root(obj_to_root(obj))
#+end_src

#+begin_src sage :results silent
  def short_name_to_root(name):
      """
      Return the root class with the given string as a short name.

      INPUT:

      - `name` -- a string of length the size of `INDICES`, whose components are non-negative integers (between 0 and 9).

      OUTPUT:

      A linear combination of elements from SIMPLES, in which the ith simple appears as many times as the integer which is the ith entry of `name`.

      EXAMPLES:

          sage: short_name_to_root('1000')
          sage: alpha[1]
          sage: short_name_to_root('1211')
          sage: alpha[1] + 2*alpha[2] + alpha[3] + alpha[4]
      """
      coeffs = [int(x) for x in name]
      return sum([x*y for x, y in zip(coeffs, SIMPLES)])
#+end_src

#+begin_src sage :results silent
  def short_name_to_obj(name, stab):
      """
      
      """
      root = short_name_to_root(name)
      for x in stab:
          if obj_to_root(x) == root:
              return x
      return None
#+end_src

* Indecomposable spherical objects in the heart
We will begin by generating all indecomposable spherical objects in the standard heart.

First, a few helper functions. Check if a given object lies in the standard heart.
#+begin_src sage :results silent
  def in_heart(obj):
      """
      Return True if and only if the given object is in the standard heart; that is, if it is a linear complex.
      """
      for i in range(obj.minIndex(), obj.maxIndex()+1):
          obj_i = obj.objects(i)
          for x in obj_i:
              if x.twist() != i:
                  return False
      return True
#+end_src

Check if two given objects are equal up to shift.
#+begin_src sage :results silent
  def equal_upto_shift(x,y):
      """
      Check if objects x and y are equal up to shift.
      """
      xmin, xmax = x.minIndex(), x.maxIndex()
      ymin, ymax = y.minIndex(), y.maxIndex()
      if xmax - xmin != ymax - ymin:
          return False

      for i in range(0, xmax - xmin + 1):
          xi, yi = x.objects(i + xmin), y.objects(i + ymin)
          if len(xi) !=  len(yi):
              return False
          if sorted([a.name() for a in xi]) != sorted([a.name() for a in yi]):
              return False
      return True
#+end_src

Helper functions to generate the braid words that we want to apply in order to get all objects in the heart.
#+begin_src sage :results silent
  W = WeylGroup(CT)

  def all_signed_combinations(w):
      """
      Return a list of all possible signed lifts of a given word w in the Weyl group.

      INPUT:
      
      - w -- a word in the Weyl group, for example [1,2]

      OUTPUT:
      
      A list of all possible signed versions of the given word. In the previous example that would be [[1,2], [-1,2], [1,-2], [-1,-2]].
      
      """
      current_signed_lifts = [[]]
      current_word = w

      while(len(current_word) > 0):
          new_signed_lifts = []
          current_letter = current_word[0]
          current_word = current_word[1:]
          for v in current_signed_lifts:
              new_signed_lifts.append(v + [current_letter])
              new_signed_lifts.append(v + [-current_letter])
          current_signed_lifts = new_signed_lifts
      return current_signed_lifts

#+end_src
Generate and return all indecomposable sphericals in the standard heart.
#+begin_src sage :results silent
  def indecomposable_sphericals_in_heart(ct = CT):
      """
      Return a list of all the spherical objects in the standard heart of the 2-CY category associated to the chosen Cartan type.
      This list checks if the generated object at any stage is equal (up to shift) to any previously generated object, and only adds it to the outputs if not already present.
      Thus the returned list should contain no duplicates.
      """
      # Collect all signed combinations of all reduced words in the Weyl group.
      reduced_words = sorted([x.reduced_word() for x in WeylGroup(ct)], key=len)
      reduced_braid_words = sum([all_signed_combinations(w) for w in reduced_words], [])
      long_word_length = max([len(x) for x in reduced_words])    
      
      # Start with the list of reduced braid words; this will be pruned as we go.
      pruned_braid_words = reduced_braid_words
      outputs = []

      # Go through words by length, applying the word to p[1] and checking if it is in the heart.
      # If it is something we have already seen, or if it is not in the heart, then
      # prune the remaining braid words by removing any word that has the current word as a rightmost substring.
      # Otherwise, we have found a new element of the heart, so add it to outputs.
      for l in range(0,long_word_length + 1):
          print("Applying words of length {}.".format(l))
          print("There are {} pruned braid words left.".format(len(pruned_braid_words)))
          lifts_of_length_l = [x for x in pruned_braid_words if len(x) == l]
          print("There are {} lifts of length {}.".format(len(lifts_of_length_l), l))
          pruned_braid_words = [x for x in pruned_braid_words if len(x) > l]
          print("There are {} pruned braid words left.".format(len(pruned_braid_words)))

          if len(lifts_of_length_l) == 0:
              # There are no more words to check so break the loop.
              print("Nothing left to do!")
              break
          
          for b in lifts_of_length_l:
              b_of_p1 = composeAll([TWIST[i] for i in b])(PROJ[1])

              if any([equal_upto_shift(b_of_p1, x) for x in outputs]) or not in_heart(b_of_p1):
                  # The braid is either redundant or not linear, so prune the braid words.
                  pruned_braid_words = [x for x in pruned_braid_words if x[-len(b):] != b]                  
              else:
                  # b_of_p1 is a new object in the heart.
                  outputs.append(b_of_p1)
                  print("Adding {} to outputs".format(b_of_p1))
      return outputs
#+end_src

* Computing with stability conditions
We can write down a central charge on the standard heart by specifying a vector in the upper half plane for each simple root.
We will do this later.
For now, we set up functions to compute semistable objects for the standard stability condition with a given central charge.
We also set up functions to compute convex and reflex morphisms between them, so that we can write down the "states".

A helper function to compute the phase of an object.
The central charge is specified as a dictionary with keys the vertices of the Dynkin diagram, and values the values of the central charge on the corresponding simple root.
#+begin_src sage :results silent
  def obj_to_phase(obj, cc):
      """
      Given a list of central charge vectors of all the positive roots
      """
      root = obj_to_root(obj)
      positive_ccs = ROOT_MATRIX * vector(cc.values())
      
      root_cc = [x[1] for x in zip(POSITIVES, positive_ccs) if x[0] == root][0]
      return float(arg(root_cc)/pi)
#+end_src

Given a central charge, we can figure out which of the indecomposable spherical objects in the heart are semistable.
#+begin_src sage :results silent
  def semistable_objects(heart, cc):
      known_stables = []
      heart_by_length = sorted(heart, key=lambda x: obj_to_root(x).length())

      def exists_hom_zero(y,x):
          """
          Return true if there is at least one degree-zero hom from object y to object x.
          """
          h = hom(y,x).qPolynomial()
          hom_zeros = [c for c in h.coefficients() if c[1] == 0 and c[0] != 0]
          return len(hom_zeros) >= 1
      
      def exists_destabilizing_sub_map(y,x):
          px, py = obj_to_phase(x, cc), obj_to_phase(y, cc)
          return (py > px) and (exists_hom_zero(y, x))

      for x in heart_by_length:
          if not any([exists_destabilizing_sub_map(y, x) for y in known_stables]):
              known_stables.append(x)
      return sorted(known_stables, key=lambda x: obj_to_phase(x, cc))
#+end_src

** Convex and reflex morphism constraints
A helper function to list all the homs between stables as well as their phases.
This is in order to discover the convex and reflex morphisms with factorings.
#+begin_src sage :results silent
  def homs_with_phases(stab, cc):
      homs_phases_list = []
      for i in range(0, len(stab)):
          for j in range(0, len(stab)):
              xi,xj = stab[i], stab[j]
              p = obj_to_phase(xj, cc) - obj_to_phase(xi, cc)
              hij = hom(xi,xj)
              hij.minimize()
              hij_degrees = sum([[k - l._grade for l in hij.objects(k)] for k in range(hij.minIndex(), hij.maxIndex()+1)], [])
              new_homs_phases = [(xi,xj,p + d) for d in hij_degrees]
              homs_phases_list = homs_phases_list + new_homs_phases
      return homs_phases_list      
#+end_src

Helper function to return a list of all convex factorings of reflex morphisms in a given morphism graph \(G\).
#+begin_src sage :results silent
    def convex_factorings(G):
      reflex_edges = [e for e in G.edges() if e[2] > 1]
      convex_factorings = []

      for e in reflex_edges:
          start, end, weight = e[0], e[1], e[2]
          for p in G.all_paths_iterator([start], [end], max_length = 2, report_edges=True, use_multiedges = True, labels=True):
              if len(p) == 1:
                  # Path too short
                  continue
              if not all([f[2] < 1 for f in p]):
                  # The path is not totally convex.
                  continue
              if not abs(sum([f[2] for f in p]) - weight) < 0.0001:
                  # Weights don't sum to our weight.
                  continue
              else:
                  convex_factorings.append((e, p))
      return convex_factorings
#+end_src

Helper function to check if a graph has the "no-convex-factoring" property.
This means that there are no two convex morphisms that compose to a reflex morphism.
Equivalently, that there is no sequence of convex morphisms that composes to give a loop map.
#+begin_src sage :results silent
  # Some flags for testing.
  USE_MULTIEDGES = True
#+end_src

#+begin_src sage :results silent
  def no_convex_factoring_property(G):
      reflex_edges = [e for e in G.edges() if e[2] > 1]

      for e in reflex_edges:
          start, end, weight = e[0], e[1], e[2]
          for p in G.all_paths_iterator([start], [end], max_length = 2, report_edges=True, use_multiedges = USE_MULTIEDGES, labels=True):
              if len(p) == 1:
                  # Path too short
                  continue
              if not all([f[2] < 1 for f in p]):
                  # The path is not totally convex.
                  continue
              if not abs(sum([f[2] for f in p]) - weight) < 0.0001:
                  # Weights don't sum to our weight.
                  continue
              else:
                  return False
      return True      
#+end_src

#+begin_src sage :results silent
  def min_reflex_morphism_subgraph(G):
      reflex_edges = {e : list(G.edges()).count(e) for e in G.edges() if e[2] > 1}
      min_reflex_edges = []

      for e in reflex_edges:
          # Check if e is non-minimal.
          start, end, weight, multiplicity = e[0], e[1], e[2], reflex_edges[e]
          if DEBUG and (multiplicity > 1):
              print("Edge multiplicity of {} is {}".format(e, multiplicity))
          e_is_minimal_reflex = True
          num_factorings = 0
          
          for p in G.all_paths_iterator([start], [end], max_length = 2, use_multiedges = USE_MULTIEDGES, report_edges=True, labels=True):
              # If the edge e has a convex/reflex factoring, then a factoring of length 2 is a witness to it.
              if len(p) == 1:
                  # Path too short
                  continue
              if not any([f[2] > 1 for f in p]):
                  # The path does not have a reflex morphism along it
                  continue
              if not abs(sum([f[2] for f in p]) - weight) < 0.0001:
                  # Weights don't sum to our weight
                  continue
              else:
                  num_factorings = num_factorings + 1
                  if DEBUG:
                      print("Found convex-reflex factoring of {} as {}".format(e, p))
                  if num_factorings >= multiplicity:
                      if DEBUG and (multiplicity > 1):
                          print("Factorings >= edge multiplicity of {}".format(e))
                      e_is_minimal_reflex = False
                      break
              
          # If e is minimal reflex, add it to our list.
          if e_is_minimal_reflex:
              min_reflex_edges.append(e)

      #Return a graph on the minimal reflex edges only.
      return DiGraph(min_reflex_edges)
#+end_src

Helper function to check if a graph has the property that it has no minimal reflex cycles.
A minimal reflex morphism is one that is reflex, which has no convex-reflex factoring.
So we want the property that there are no cycles of minimally reflex morphisms.
#+begin_src sage :results silent
  def no_min_reflex_cycles(G):
      G1 = min_reflex_morphism_subgraph(G)
      return G1.is_directed_acyclic()
#+end_src

#+begin_src sage :results silent
  def single_rigid_component(G):
      convex_edges = [e for e in G.edges() if e[2] < 1]
      G1 = DiGraph(convex_edges, multiedges=True)

      H = Graph()
      for c in G1.all_simple_cycles():
          for i in range(0, len(c)):
              for j in range(0, i):
                  H.add_edge(i,j)
      return H.clique_number() == len(G.vertices())
#+end_src

This portion of the code is currently also specifict to type D4. It returns all subgraphs of the morphism graph of stab of size 6, that satisfy the ncfs and nmrc properties mentioned earlier.
#+begin_src sage :results silent
  def get_ncfs_and_nmrc(stab, cc):
      hwp = homs_with_phases(stab, cc)
      hwp_edges = [(short_name(x[0]), short_name(x[1]), x[2]) for x in hwp if x[0] != x[1]]
      G = DiGraph(hwp_edges, multiedges=USE_MULTIEDGES)
      size6_subgraphs = [G.subgraph(x) for x in itertools.combinations(G.vertices(), 6)]
      print("Checking ncfs.")
      ncfs_6 = [set(H.vertices()) for H in size6_subgraphs if no_convex_factoring_property(H)]
      print("Checking nmrc.")
      nmrc_6 = [set(H.vertices()) for H in size6_subgraphs if no_min_reflex_cycles(H)]
      return G, ncfs_6, nmrc_6
#+end_src

Construct the flip graph of a set of proposed states.
#+begin_src sage :results silent
  def flip_graph(states):
      edges = [(frozenset(x),frozenset(y)) for x in states for y in states if len(x&y) == len(x) - 1]
      return Graph(edges)
#+end_src

* Expansive motions business

** Expansive inequalities and polytope of expansive motions
The inequalities to construct the ("unconstrained") expansive polytope are of the form \(\langle z, v \rangle \ge 0\), where \(z\) is a central charge vector and \(v\) is the corresponding velocity vector.

The velocity vector for the simple root \(\alpha_i\) will be represented by the vector \(a_i, b_i\), where \(a_i\) and \(b_i\) are variables.
More generally, the velocity vector for a root 
\[\alpha = \sum_i c_i \alpha_i\]
will be the vector
\[v_{\alpha} = \sum_i c_i (a_i, b_i).\]

Recall that the central charge of any root \(\alpha\) is some complex number \(z_{\alpha}\).
To write down a dot product expression \(\langle z_{\alpha}, v_{\alpha}\), we convert the central charge to a vector in \(\mathbb{R}^2\) in the obvious way, and then take its dot product with the vector \(v_{\alpha}\) above.
The output is a symbolic expression; a linear combination of the variables \(a_i\) and \(b_i\).

** Computations on extremal rays
Recall that an extremal ray consists of the \(x\) and \(y\) coordinates for each of the velocity vectors.

The following helper function converts an extremal ray into a matrix of velocities, by splitting the list into pieces of size \(2\) and then converting the output into a matrix.
#+begin_src sage :results silent
  def ray_to_velocity_matrix(r):
      return matrix([r[i:i+2] for i in range(0,len(r),2)])
#+end_src

A matrix of velocities corresponding to an extremal ray specifies how each point moves, so that we get an infinitesimally expansive motion.
The central charge vectors that remain rigid (do not expand) are exactly the ones whose velocity vector have zero dot product with the corresponding central charge vector.
The collection of these central charge vectors forms a subset that has a unique infinitesimal expansive motion.
Each such collection is further divided into rigid components: each rigid component moves together in the unique expansive motion of the extremal ray.

A rigid component within an extremal ray identified by the fact that all elements in the same rigid component have the same ratio of the length of the velocity vector to the length of the central charge vector.

The following function produces a list of rigid components given an extremal ray.
#+begin_src sage :results silent
  def rigid_components(ray):
      velocities = ROOT_MATRIX * ray_to_velocity_matrix(ray)
      rigid_roots_ratios = [(ray,x.norm()/y.norm())
                            for (ray,x,y) in zip(POSITIVES,velocities, positive_ccs) if x.dot_product(y) == 0]
      unique_ratios = set(t[1] for t in rigid_roots_ratios)
      components = []
      for ratio in unique_ratios:
          this_component = []
          for t in rigid_roots_ratios:
              if t[1] == ratio:
                  this_component.append(t[0])
          components.append(this_component)

      return components
#+end_src

** Construction of the polytope
To construct the polytope, we follow the following steps.
1. Create variables to represent coordinates for the velocity vectors of the simple roots.
2. Then compute the central charges and (indeterminate) velocities for all the positive roots.
3. For each root \(\alpha\), consider the inequality \(\langle z_{\alpha}, v_{\alpha}\rangle \geq 0\). Convert these to a form acceptable to sage.
4. Then construct the polytope \(P\).
5. Finally, construct the rigid components for each extremal ray, and return \(P\) together with the collection of extremal sets subdivided into rigid components.

#+begin_src sage :results silent
  def construct_polytope_and_components(cc):
      simple_velocities = matrix([[var('a' + str(i)), var('b' + str(i))] for i in INDICES])
      positive_ccs = [vector(x) for x in ROOT_MATRIX * vector(cc.values())]
      positive_velocities = ROOT_MATRIX * simple_velocities
      
      def eq_to_ieq(expr):
          return [0] + [expr.coefficient(x) for x in simple_velocities.list()]

      ineqs = [eq_to_ieq(x.dot_product(y)) for (x,y) in zip(positive_velocities, positive_ccs)]

      P = Polyhedron(ieqs = ineqs, base_ring=QQ)
      
      def rigid_components(ray):
          velocities = ROOT_MATRIX * ray_to_velocity_matrix(ray)
          rigid_roots_ratios = [(ray,x.norm()/y.norm())
                                for (ray,x,y) in zip(POSITIVES,velocities, positive_ccs) if x.dot_product(y) == 0]
          unique_ratios = set(t[1] for t in rigid_roots_ratios)
          components = []
          for ratio in unique_ratios:
              this_component = []
              for t in rigid_roots_ratios:
                  if t[1] == ratio:
                      this_component.append(t[0])
              components.append(this_component)
          return components

      components = [rigid_components(r) for r in P.ray_generator()]

      return P, components
#+end_src

* Central charges
Helper function to plot a central charge.
#+begin_src sage :results silent
  def plot_cc(cc):
      positive_ccs = [vector(x) for x in ROOT_MATRIX * vector(cc.values())]
      positive_roots_short = [short_name_from_root(x) for x in POSITIVES]
      return sum([plot(x) + text(y, 1.1*x) for (x,y) in zip(positive_ccs, positive_roots_short)])
#+end_src

* Results in type \(D_4\)
#+begin_src sage :results silent
  CT = CartanType("D4")
#+end_src

The resulting Dynkin diagram looks like this; note that \(2\) is the central vertex.
#+begin_example
    O 4
    |
    |
O---O---O
1   2   3   
D4
#+end_example

Let us input a sample central charge.
WARNING: This part of the code is specific to type D4!
  #+begin_src sage :results file
    # Both of these appear to be "type 1": 78 total states, with
    # 594 ncfs, 456 nmrc, with intersection of size 456.
    cc1 = {1: -1 + I, 2: 20 + I, 3: -1 + 2*I, 4: -1 + 3*I}
    cc2 = {1: -1 + I, 2: 20 + I, 3: -1 + 2*I, 4: 9+3*I}

    # This one is "type 2": 81 total states, with
    # 532 ncfs, 263 nmrc, with intersection of size 157.
    cc3 = {1: -1 + I, 2: 20 + I, 3: -1 + 5*I, 4: 9+3*I}

    # This one is "type 3": 80 total states, with
    # 480 ncfs, 288 nmrc, with intersection of size 136.
    cc4 = {1: -1 + 10*I, 2: 20 + I, 3: -1 + 5*I, 4: 9+3*I}

    # This one may be "type 4": still 80 total states, but
    # 576 ncfs, 347 nmrc, with intersection of size 289. This appears to be a "stable" state somehow.
    cc5 = {1: -1 + 10*I, 2: 20 + I, 3: -1 + 11*I, 4: 9+3*I}

    # This is "type 2" again.
    cc6 = {1: -5 + I, 2: -20 + 3*I, 3: 2 + I, 4: 3 + I}

    # These are both "type 3".
    cc7 = {1: 10 + I , 2: -9 + 5*I , 3: 4+3*I , 4: 20}
    cc8 = {1: 9, 2: 4 + 3*I , 3: -4+3*I , 4: -33+I}

    cc9 = {1: 9 + 5*I, 2: 7, 3: -15 + 5*I, 4: 13 + 13*I}
    cc10 = {1: 9, 2: 7 + 5*I, 3: -15 + 5*I, 4: 13 + 13*I}    
    cc = cc8
    plot_cc(cc)
  #+end_src

* Results
Helper function to do everything at once, and return the states as well as check whether the flip graph on them is regular.
#+begin_src sage :results silent
  def check_cc(heart, cc):
      print("Creating semistable objects.")
      stab = semistable_objects(heart, cc)
      _, ncfs, nmrc = get_ncfs_and_nmrc(stab, cc)
      print("There are {} ncfs subgraphs.".format(len(ncfs)))
      print("There are {} nmrc subgraphs.".format(len(nmrc)))
      ncfs_and_nmrc = [x for x in ncfs if x in nmrc]
      
      print("Their intersection has size {}.".format(len(ncfs_and_nmrc)))
      print("Constructing polytope.")

      print("Constructing polytope and rigid components.")
      
      P, collapsed_components = construct_polytope_and_components(cc)
      collapsed_states = [flatten(x) for x in collapsed_components]
      collapsed_states = [set([short_name_from_root(x) for x in s]) for s in collapsed_states]

      states = [x for x in ncfs_and_nmrc if any([x.issubset(y) for y in collapsed_states])]
      print("There are {} states.".format(len(states)))
      fg = flip_graph(states)
      if fg.is_regular():
          print("The flip graph is regular!")
      else:
          print("The flip graph is NOT regular.")

      return P, ncfs_and_nmrc, states, fg
      #+end_src

