#+property: header-args:sage :session foo :eval never-export :exports both

* Basic setup for D4

Basic setup for D4
#+begin_src sage
  load("d4-setup.sage")
#+end_src

#+RESULTS:
: Defining e_1, e_2, e_3, e_4, a, b, c, d, e, f, fa, db, ec, af

HN filtrations
#+begin_src sage 
  load("../HN.sage")
#+end_src

#+RESULTS:

* A stability condition 

A particular stability condition (P1, P2, P3) are on the left and P4 is far to the right and long.

#+begin_src sage :results silent
    simple_root_labels_d4 = ['1', '2', '3', 'x']
    simple_roots_d4 = vector([var('r' + l) for l in simple_root_labels_d4])
#+end_src
  
The actual stability condition
#+begin_src sage :results silent
  stab = [P4, s1(P4), s3(P4), s2(P4), internalTwist(t4(t1(t2(t3(P4)))),-2).shift(2), s1(s3(P4)), s1(s2(P4)), s2(s3(P4)), s1(s2(s3(P4))), P3, P2, P1]
  stabclasses = [rx, r1+rx, r3+rx, r2+rx, r3+r2+r1+2*rx, r1+r3+rx, r1+r2+rx, r2+r3+rx, r1+r2+r3+rx, r3, r2, r1]
#+end_src

* A weird example
This is a possible example of a spherical object whose support does not admit an expansive motion.
But it's not. 
It just means that the "resolution" of the expansive motions into 6 element states was incorrect.

An object
#+begin_src sage :session foo
  X = s1(t4(t3(t2(t4(P1)))))
  HN(X,stab)
#+end_src

#+RESULTS:
: <string>:136: DeprecationWarning: the output of uniq(X) being sorted is deprecated; use sorted(set(X)) instead if you want sorted output
: See https://trac.sagemath.org/27014 for details.
: <string>:40: DeprecationWarning: the output of uniq(X) being sorted is deprecated; use sorted(set(X)) instead if you want sorted output
: See https://trac.sagemath.org/27014 for details.
: [[2]: P1<2>+P2<2>+P3<2> → P4<3> :[3],
:  [0]: P1<0> → P4<1> :[1],
:  [-1]: P1<-2> :[-1]]

* More HN filtrations
States admitting expansive motions.
#+begin_src sage
  collapsed_states = [[r1, r3, rx, r1 + rx, r3 + rx, r1 + r3 + rx, r2 + rx],
                      [r1, r2, r3 + rx, r1 + r3 + rx, r2 + r3 + rx, r1 + r2 + r3 + rx, r3],
                      [r1,
                       r2,
                       r3 + rx,
                       r1 + r3 + rx,
                       r2 + r3 + rx,
                       r1 + r2 + r3 + rx,
                       r1 + r2 + rx],
                      [r2,
                       r3,
                       r1 + rx,
                       r1 + r2 + rx,
                       r1 + r3 + rx,
                       r1 + r2 + r3 + rx,
                       r2 + r3 + rx],
                      [r1,
                       r2 + rx,
                       r3 + rx,
                       r1 + r2 + rx,
                       r1 + r3 + rx,
                       r1 + r2 + r3 + 2*rx,
                       r2 + r3 + rx],
                      [r2, r3, r1 + rx, r1 + r2 + rx, r1 + r3 + rx, r1 + r2 + r3 + rx, r1],
                      [r2, r1, r3, rx, r1 + rx, r3 + rx, r1 + r3 + rx],
                      [r3 + rx,
                       r3,
                       r1 + rx,
                       r2 + rx,
                       r1 + r3 + rx,
                       r2 + r3 + rx,
                       r1 + r2 + r3 + 2*rx],
                      [r1 + r2 + rx,
                       r3,
                       r1 + rx,
                       r2 + rx,
                       r1 + r3 + rx,
                       r2 + r3 + rx,
                       r1 + r2 + r3 + 2*rx],
                      [r1 + rx,
                       r1,
                       r2 + rx,
                       r3 + rx,
                       r1 + r2 + rx,
                       r1 + r3 + rx,
                       r1 + r2 + r3 + 2*rx],
                      [r2, r1, r3, r2 + rx, r1 + r2 + rx, r2 + r3 + rx, r1 + r2 + r3 + rx],
                      [r2, r1 + rx, r1 + r2 + rx, r3, r2 + rx, r2 + r3 + rx],
                      [r2, r3, rx, r2 + rx, r3 + rx, r2 + r3 + rx, r1],
                      [r2, r3 + rx, r2 + r3 + rx, r1, r2 + rx, r1 + r2 + rx],
                      [r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3 + rx],
                      [r2, r3, rx, r2 + rx, r3 + rx, r2 + r3 + rx, r1 + rx],
                      [r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3],
                      [r2,
                       r1 + rx,
                       r3 + rx,
                       r1 + r2 + rx,
                       r2 + r3 + rx,
                       r1 + r2 + r3 + 2*rx,
                       r2 + rx],
                      [r2,
                       r1 + rx,
                       r3 + rx,
                       r1 + r2 + rx,
                       r2 + r3 + rx,
                       r1 + r2 + r3 + 2*rx,
                       r1 + r3 + rx],
                      [r3, r1 + rx, r1 + r3 + rx, r1, r2 + rx, r1 + r2 + rx],
                      [r2, r3 + rx, r2 + r3 + rx, r3, r1 + rx, r1 + r3 + rx],
                      [r2, r1 + rx, r1 + r2 + rx, r1, r3 + rx, r1 + r3 + rx],
                      [r1, r3 + rx, r1 + r3 + rx, r3, r2 + rx, r2 + r3 + rx],
                      [r1,
                       r3,
                       r2 + rx,
                       r1 + r2 + rx,
                       r2 + r3 + rx,
                       r1 + r2 + r3 + rx,
                       r1 + r3 + rx]]
#+end_src

#+RESULTS:

Testing various objects
#+begin_src sage
  s123x = composeAll([s1, s2, s3, s4, t3, t2, t1])
  t123x = composeAll([s1, s2, s3, t4, t3, t2, t1])
  s123xx = composeAll([t4, t1, t2, t3, s4, s3, t2, t1, t4])
  t123xx = composeAll([t4, t1, t2, t3, t4, s3, t2, t1, t4])
  X = s123xx(stab[4])
  supp = support(X, stab)
  print([stabclasses[i] for i in supp])
  states = [s for s in collapsed_states if all([stabclasses[i] in s for i in supp])]
  print(states)
  len(states)
#+end_src
#+RESULTS:
: [r1 + rx, r3 + rx, r2 + rx, r1 + r2 + r3 + 2*rx, r1 + r2 + rx]
: [[r1 + rx, r1, r2 + rx, r3 + rx, r1 + r2 + rx, r1 + r3 + rx, r1 + r2 + r3 + 2*rx], [r2, r1 + rx, r3 + rx, r1 + r2 + rx, r2 + r3 + rx, r1 + r2 + r3 + 2*rx, r2 + rx]]
: 2

#+begin_src sage
  Y = s4(s1(s4(t3(t4(t2(t2(t4(P1))))))))
  supp = support(Y, stab)
  print([stabclasses[i] for i in supp])
  states = [s for s in collapsed_states if all([stabclasses[i] in s for i in supp])]
  print(states)
  len(states)
#+end_src

#+RESULTS:
: <string>:40: DeprecationWarning: the output of uniq(X) being sorted is deprecated; use sorted(set(X)) instead if you want sorted output
: See https://trac.sagemath.org/27014 for details.
: [rx, r1 + rx, r1 + r2 + rx, r3, r2, r1]
: [[r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3]]
: 1

So the following state is real.
#+RESULTS:
: <string>:40: DeprecationWarning: the output of uniq(X) being sorted is deprecated; use sorted(set(X)) instead if you want sorted output
: See https://trac.sagemath.org/27014 for details.
: [rx, r1 + rx, r1 + r2 + rx, r3, r2, r1]
: [[r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3]]
: 1

#+begin_src sage
  Y = s4(s1(s4(t3(t4(t2(t2(t4(P3))))))))
  supp = support(Y, stab)
  print([stabclasses[i] for i in supp])
  states = [s for s in collapsed_states if all([stabclasses[i] in s for i in supp])]
  print(states)
  len(states)
#+end_src

#+RESULTS:
: <string>:40: DeprecationWarning: the output of uniq(X) being sorted is deprecated; use sorted(set(X)) instead if you want sorted output
: See https://trac.sagemath.org/27014 for details.
: [rx, r1 + rx, r1 + r2 + rx, r3, r2, r1]
: [[r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3]]
: 1

#+begin_src sage :results file
central_charge_plot
#+end_src

#+RESULTS:
[[file:]]

So the following state is real.
#+RESULTS:
: <string>:40: DeprecationWarning: the output of uniq(X) being sorted is deprecated; use sorted(set(X)) instead if you want sorted output
: See https://trac.sagemath.org/27014 for details.
: [rx, r1 + rx, r1 + r2 + rx, r3, r2, r1]
: [[r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3]]
: 1

#+begin_src sage 
  Y = s3(s4(s1(s4(t3(t4(t2(t2(t4(P1)))))))))
  supp = support(Y, stab)
  states = [s for s in collapsed_states if all([stabclasses[i] in s for i in supp])]
  [stabclasses[i] for i in support(Y, stab)]
#+end_src

#+RESULTS:
: <string>:40: DeprecationWarning: the output of uniq(X) being sorted is deprecated; use sorted(set(X)) instead if you want sorted output
: See https://trac.sagemath.org/27014 for details.
: [r1 + rx, r3 + rx, r1 + r3 + rx, r1 + r2 + rx, r2, r1]

Thanks to the object above and symmetry, all the states below are real.
#+begin_src sage
  [s for s in collapsed_states if len(s) == 6]
#+end_src

#+RESULTS:
: [[r2, r1 + rx, r1 + r2 + rx, r3, r2 + rx, r2 + r3 + rx],
:  [r2, r3 + rx, r2 + r3 + rx, r1, r2 + rx, r1 + r2 + rx],
:  [r3, r1 + rx, r1 + r3 + rx, r1, r2 + rx, r1 + r2 + rx],
:  [r2, r3 + rx, r2 + r3 + rx, r3, r1 + rx, r1 + r3 + rx],
:  [r2, r1 + rx, r1 + r2 + rx, r1, r3 + rx, r1 + r3 + rx],
:  [r1, r3 + rx, r1 + r3 + rx, r3, r2 + rx, r2 + r3 + rx]]

Let us take [rx, r1 + rx, r1 + r2 + rx, r3, r2, r1] and delete P1.
#+begin_src  sage
  [s for s in collapsed_states if all([x in s for x in [rx, r1 + rx, r1 + r2 + rx, r3, r2]])]
#+end_src

#+RESULTS:
: [[r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3]]

This implies that the following state must be real:
# [r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3]

Note that this state is 1 flip away from one of the original 6 element states.

Let us take [rx, r1 + rx, r1 + r2 + rx, r3, r2, r2 + rx] and delete P2.
#+begin_src  sage
  [s for s in collapsed_states if all([x in s for x in [rx, r1 + rx, r1 + r2 + rx, r3, r2+rx]])]
#+end_src

#+RESULTS:
: [[r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3]]

This implies that the following state must be real.
# [[[r1, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3]]]

Let us take [rx, r1 + rx, r1 + r2 + rx, r3, r2, r2 + rx] and delete P1 -> Px
#+begin_src  sage
  [s for s in collapsed_states if all([x in s for x in [rx, r1 + rx, r1 + r2 + rx, r3, r2, r2 + rx]])]
#+end_src

#+RESULTS:
: [[r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3]]

So the following must be real.
# [[[r1, r2, rx, r2 + rx, r1 + r2 + rx, r3]]]

Let us take [rx, r1 + rx, r1 + r2 + rx, r3, r2, r2 + rx] and delete P3
#+begin_src  sage
  [s for s in collapsed_states if all([x in s for x in [rx, r1 + rx, r1 + r2 + rx, r2, r2 + rx]])]
#+end_src

#+RESULTS:
: [[r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3 + rx],
:  [r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3]]
This gives two possibilities, but one is suspicious.  So we believe the following is real.
# [r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3 + rx]

Let us take [rx, r1 + rx, r1 + r2 + rx, r3, r2, r2 + rx] and delete P1, P2 -> Px
#+begin_src  sage
  [s for s in collapsed_states if all([x in s for x in [rx, r1 + rx, r3, r2, r2 + rx]])]
#+end_src

#+RESULTS:
: [[r2, r3, rx, r2 + rx, r3 + rx, r2 + r3 + rx, r1 + rx],
:  [r1, r2, rx, r1 + rx, r2 + rx, r1 + r2 + rx, r3]]
This give two possibilities, but one is suspicious.  So we believe the following is real.
# [r2, r3, rx, r2 + rx, r2 + r3 + rx, r1 + rx]

** Associated pictures from the board
*** Conjectural flip picture:
#+DOWNLOADED: screenshot @ 2022-03-30 14:45:04
[[file:assets/More_HN_filtrations/2022-03-30_14-45-04_screenshot.png]]
*** Stable objects colored

#+DOWNLOADED: screenshot @ 2022-03-30 14:47:33
[[file:assets/More_HN_filtrations/2022-03-30_14-47-33_screenshot.png]]
* All  the states in a particular stability condition.
#+begin_src sage
  central_charge = matrix([[-3,1],[-2,1], [-1,1],[7,0]])
  central_charge_euclidean = change_of_basis.inverse() * central_charge
#+end_src

#+RESULTS:
:results:
:end:

Notation:
X1 = P1
X2 = P2
X3 = P3
Y1 = P2, P3 -> Px
Y2 = P1, P3 -> Px
Y3 = P1, P2 -> Px
Z1 = P1->Px
Z2 = P2->Px
Z3 = P3->Px
A = P1, P2, P3 -> Px,Px
B = Px
C = P1, P2, P3 -> Px

#+begin_src sage :results none
  objects = var('X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3', 'Z1', 'Z2', 'Z3', 'A', 'B', 'C')
  Xs = {1:X1, 2:X2, 3:X3}
  Ys = {1:Y1, 2:Y2, 3:Y3}
  Zs = {1:Z1, 2:Z2, 3:Z3}
#+end_src

Type 1
#+begin_src sage
  type1_states =[
        [Xs[p(1)], Xs[p(2)], Ys[p(1)], Ys[p(3)], Zs[p(2)], Zs[p(3)]]
        for p in SymmetricGroup(3)
    ]
  type1_states
#+end_src

#+RESULTS:
:results:
[[X1, X2, Y1, Y3, Z2, Z3],
 [X3, X1, Y3, Y2, Z1, Z2],
 [X2, X3, Y2, Y1, Z3, Z1],
 [X1, X3, Y1, Y2, Z3, Z2],
 [X3, X2, Y3, Y1, Z2, Z1],
 [X2, X1, Y2, Y3, Z1, Z3]]
:end:

Type 2
#+begin_src sage
  type2_states = [[B, Xs[p(1)], Xs[p(2)], Zs[p(2)], Zs[p(3)], Ys[p(1)]]     for p in SymmetricGroup(3)] +  [[B, Xs[p(1)], Xs[p(2)], Zs[p(2)], Zs[p(3)], Ys[p(3)]]     for p in SymmetricGroup(3)] +  [[C, Ys[p(1)], Ys[p(2)], Xs[p(2)], Xs[p(3)], Zs[p(1)]]     for p in SymmetricGroup(3)] +  [[C, Ys[p(1)], Ys[p(2)], Xs[p(2)], Xs[p(3)], Zs[p(3)]]     for p in SymmetricGroup(3)] +  [[A, Zs[p(1)], Zs[p(2)], Ys[p(2)], Ys[p(3)], Xs[p(1)]]     for p in SymmetricGroup(3)] +  [[A, Zs[p(1)], Zs[p(2)], Ys[p(2)], Ys[p(3)], Xs[p(3)]]     for p in SymmetricGroup(3)]
  type2_states
#+end_src

#+RESULTS:
:results:
[[B, X1, X2, Z2, Z3, Y1],
 [B, X3, X1, Z1, Z2, Y3],
 [B, X2, X3, Z3, Z1, Y2],
 [B, X1, X3, Z3, Z2, Y1],
 [B, X3, X2, Z2, Z1, Y3],
 [B, X2, X1, Z1, Z3, Y2],
 [B, X1, X2, Z2, Z3, Y3],
 [B, X3, X1, Z1, Z2, Y2],
 [B, X2, X3, Z3, Z1, Y1],
 [B, X1, X3, Z3, Z2, Y2],
 [B, X3, X2, Z2, Z1, Y1],
 [B, X2, X1, Z1, Z3, Y3],
 [C, Y1, Y2, X2, X3, Z1],
 [C, Y3, Y1, X1, X2, Z3],
 [C, Y2, Y3, X3, X1, Z2],
 [C, Y1, Y3, X3, X2, Z1],
 [C, Y3, Y2, X2, X1, Z3],
 [C, Y2, Y1, X1, X3, Z2],
 [C, Y1, Y2, X2, X3, Z3],
 [C, Y3, Y1, X1, X2, Z2],
 [C, Y2, Y3, X3, X1, Z1],
 [C, Y1, Y3, X3, X2, Z2],
 [C, Y3, Y2, X2, X1, Z1],
 [C, Y2, Y1, X1, X3, Z3],
 [A, Z1, Z2, Y2, Y3, X1],
 [A, Z3, Z1, Y1, Y2, X3],
 [A, Z2, Z3, Y3, Y1, X2],
 [A, Z1, Z3, Y3, Y2, X1],
 [A, Z3, Z2, Y2, Y1, X3],
 [A, Z2, Z1, Y1, Y3, X2],
 [A, Z1, Z2, Y2, Y3, X3],
 [A, Z3, Z1, Y1, Y2, X2],
 [A, Z2, Z3, Y3, Y1, X1],
 [A, Z1, Z3, Y3, Y2, X2],
 [A, Z3, Z2, Y2, Y1, X1],
 [A, Z2, Z1, Y1, Y3, X3]]
:end:

Type 3
#+begin_src sage
  type3_states = [[B, Xs[1], Xs[2], Xs[3], Zs[p(1)], Ys[p(2)]] for p in SymmetricGroup(3)]   +  [[B, Zs[1], Zs[2], Zs[3], Xs[p(1)], Ys[p(2)]] for p in SymmetricGroup(3)]+  [[C, Ys[1], Ys[2], Ys[3], Xs[p(1)], Zs[p(2)]] for p in SymmetricGroup(3)]  +  [[C, Xs[1], Xs[2], Xs[3], Ys[p(1)], Zs[p(2)]] for p in SymmetricGroup(3)]+  [[A, Zs[1], Zs[2], Zs[3], Ys[p(1)], Xs[p(2)]] for p in SymmetricGroup(3)]  +  [[A, Ys[1], Ys[2], Ys[3], Zs[p(1)], Xs[p(2)]] for p in SymmetricGroup(3)]
  type3_states
#+end_src

#+RESULTS:
:results:
[[B, X1, X2, X3, Z1, Y2],
 [B, X1, X2, X3, Z3, Y1],
 [B, X1, X2, X3, Z2, Y3],
 [B, X1, X2, X3, Z1, Y3],
 [B, X1, X2, X3, Z3, Y2],
 [B, X1, X2, X3, Z2, Y1],
 [B, Z1, Z2, Z3, X1, Y2],
 [B, Z1, Z2, Z3, X3, Y1],
 [B, Z1, Z2, Z3, X2, Y3],
 [B, Z1, Z2, Z3, X1, Y3],
 [B, Z1, Z2, Z3, X3, Y2],
 [B, Z1, Z2, Z3, X2, Y1],
 [C, Y1, Y2, Y3, X1, Z2],
 [C, Y1, Y2, Y3, X3, Z1],
 [C, Y1, Y2, Y3, X2, Z3],
 [C, Y1, Y2, Y3, X1, Z3],
 [C, Y1, Y2, Y3, X3, Z2],
 [C, Y1, Y2, Y3, X2, Z1],
 [C, X1, X2, X3, Y1, Z2],
 [C, X1, X2, X3, Y3, Z1],
 [C, X1, X2, X3, Y2, Z3],
 [C, X1, X2, X3, Y1, Z3],
 [C, X1, X2, X3, Y3, Z2],
 [C, X1, X2, X3, Y2, Z1],
 [A, Z1, Z2, Z3, Y1, X2],
 [A, Z1, Z2, Z3, Y3, X1],
 [A, Z1, Z2, Z3, Y2, X3],
 [A, Z1, Z2, Z3, Y1, X3],
 [A, Z1, Z2, Z3, Y3, X2],
 [A, Z1, Z2, Z3, Y2, X1],
 [A, Y1, Y2, Y3, Z1, X2],
 [A, Y1, Y2, Y3, Z3, X1],
 [A, Y1, Y2, Y3, Z2, X3],
 [A, Y1, Y2, Y3, Z1, X3],
 [A, Y1, Y2, Y3, Z3, X2],
 [A, Y1, Y2, Y3, Z2, X1]]
:end:

#+begin_src sage
  states = type1_states + type2_states + type3_states
#+end_src

#+RESULTS:
:results:
:end:

All simplices
#+begin_src sage
  def simplicies(i):
      return [x for x in Set(objects).subsets(i) if any([set(x).issubset(set(s)) for s in states])]
  [len(simplicies(i)) for i in range(1,7)]
 #+end_src

 #+RESULTS:
 :results:
 [12, 63, 180, 285, 234, 78]
 :end:
#+begin_src sage
  12 - 63 + 180 - 285 + 234 - 78
#+end_src

#+RESULTS:
:results:
0
:end:

** Checking pair/triple/quadruple

Is it a pairwise condition?  Almost but not quite
#+begin_src sage
  forbidden2 = [x for x in Set(objects).subsets(2) if Set(x) not in simplicies(2)]
  [y for y in [x for x in Set(objects).subsets(3) if all([not f.issubset(x) for f in forbidden2])] if y not in simplicies(3)]
#+end_src

#+RESULTS:
#+begin_example
[{X3, Z3, Y3},
 {X3, X2, A},
 {X3, A, X1},
 {Y2, B, Y3},
 {Y1, B, Y3},
 {Y2, Y1, B},
 {X2, A, X1},
 {Y2, X2, Z2},
 {C, Z3, Z2},
 {C, Z3, Z1},
 {Y1, X1, Z1},
 {C, Z2, Z1}]
#+end_example

Is it a pair and triple condition?  No!
#+begin_src sage
  forbidden2 = [x for x in Set(objects).subsets(2) if Set(x) not in simplicies(2)]
  forbidden3 = [x for x in Set(objects).subsets(3) if Set(x) not in simplicies(3)]
  [y for y in [x for x in Set(objects).subsets(4) if all([not f.issubset(x) for f in forbidden2 + forbidden3])] if y not in simplicies(4)]
#+end_src

#+RESULTS:
: [{Y2, X3, X2, Y3},
:  {Y1, X3, X1, Y3},
:  {X3, X2, Z3, Z2},
:  {X3, Z3, X1, Z1},
:  {Y2, Z3, Z2, Y3},
:  {Y1, Z3, Z1, Y3},
:  {Y2, Y1, X2, X1},
:  {X2, X1, Z2, Z1},
:  {Y2, Y1, Z2, Z1}]

Is it a pair and triple and quadruple condition?  
#+begin_src sage
  forbidden2 = [x for x in Set(objects).subsets(2) if Set(x) not in simplicies(2)]
  forbidden3 = [x for x in Set(objects).subsets(3) if Set(x) not in simplicies(3)]
  forbidden4 = [x for x in Set(objects).subsets(4) if Set(x) not in simplicies(4)]
  len([y for y in [x for x in Set(objects).subsets(5) if all([not f.issubset(x) for f in forbidden2 + forbidden3 + forbidden4])]])
#+end_src

#+RESULTS:
: 234
** The polytope of all the states
Sage allows us to build a simplicial complex.
#+begin_src sage
  sphericals = SimplicialComplex(states)
  vertices = sphericals.vertices()
  sphericals.connected_component(vertices[1])
#+end_src

#+RESULTS:

Let us compute the (reduced) homology.
#+begin_src sage
  sphericals.homology()
#+end_src

#+RESULTS:
: {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: Z}

#+begin_src sage
  sphericals.is_connected()
sphericals.connected_component()
#+end_src

#+RESULTS:
: False
: Simplicial complex with vertex set () and facets {()}


#+begin_src sage
  sphericals.is_pseudomanifold()
#+end_src

#+RESULTS:
: True

#+begin_src sage
  sphericals.fundamental_group()
#+end_src

#+RESULTS:
** Visualizing a state
We first draw the central charge.
#+begin_src  sage :results file
  central_charge_plot = sum([point(central_charge_euclidean.rows()[i], color=rainbow(4)[i], legend_label=str(i+1), size=100) for i in range(0,4)]) + sum([point(-1*central_charge_euclidean.rows()[i], color='red', size=100) for i in range(0,4)]) + point((0,0), color='black', size=100)
  central_charge_plot
#+end_src

#+RESULTS:
[[file:/tmp/tmpqpw_mk23/tmp_9ft2s8xq.png]]

We now plot states.  We first record the classes of the objects.

#+begin_src  sage
    alpha = RS.root_lattice().simple_roots()
    objects = var('X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3', 'Z1', 'Z2', 'Z3', 'A', 'B', 'C')
    classes = {
        X1 : alpha[1],
        X2 : alpha[2],
        X3 : alpha[3],
        Y1 : alpha[2]+ alpha[3] + alpha[4],
        Y2 : alpha[1]+ alpha[3] + alpha[4],
        Y3 : alpha[1]+ alpha[2] + alpha[4],
        Z1 : alpha[1]+alpha[4],
        Z2 : alpha[2]+alpha[4],
        Z3 : alpha[3]+alpha[4],
        A : alpha[1]+ alpha[2]+ alpha[3] + alpha[4]+alpha[4],
        B : alpha[4],
        C : alpha[1]+ alpha[2]+ alpha[3] + alpha[4]
    }
    ambient_basis =   RS.ambient_space().basis()
    def root_as_difference(root):
        return [((s,i),(t,j)) for i in range(0,4) for j in range(0,4) for s in [1,-1] for t in [1,-1] if s*vector(ambient_basis[i]) - t*vector(ambient_basis[j]) == vector(RS.ambient_space()(root))]

    roots_as_differences = {r : root_as_difference(r) for r in classes.values()}
    roots_as_differences
  #+end_src

  #+RESULTS:
  #+begin_example
  {alpha[1]: [((1, 0), (1, 1)), ((-1, 1), (-1, 0))],
   alpha[2]: [((1, 2), (-1, 3)), ((1, 3), (-1, 2))],
   alpha[3]: [((1, 2), (1, 3)), ((-1, 3), (-1, 2))],
   alpha[2] + alpha[3] + alpha[4]: [((1, 1), (-1, 2)), ((1, 2), (-1, 1))],
   alpha[1] + alpha[3] + alpha[4]: [((1, 0), (1, 3)), ((-1, 3), (-1, 0))],
   alpha[1] + alpha[2] + alpha[4]: [((1, 0), (-1, 3)), ((1, 3), (-1, 0))],
   alpha[1] + alpha[4]: [((1, 0), (1, 2)), ((-1, 2), (-1, 0))],
   alpha[2] + alpha[4]: [((1, 1), (-1, 3)), ((1, 3), (-1, 1))],
   alpha[3] + alpha[4]: [((1, 1), (1, 3)), ((-1, 3), (-1, 1))],
   alpha[1] + alpha[2] + alpha[3] + 2*alpha[4]: [((1, 0), (-1, 1)),
    ((1, 1), (-1, 0))],
   alpha[4]: [((1, 1), (1, 2)), ((-1, 2), (-1, 1))],
   alpha[1] + alpha[2] + alpha[3] + alpha[4]: [((1, 0), (-1, 2)),
    ((1, 2), (-1, 0))]}
  #+end_example

  
  We now plot a stable object and state.
  #+begin_src sage :results file
    ambient_basis =   RS.ambient_space().basis()
    def plot_object(x, color='blue'):
            xclass = classes[x]
            return sum([arrow(t * vector(ambient_basis[j]) * central_charge_euclidean, s * vector(ambient_basis[i]) * central_charge_euclidean, color=color, width=1,arrowsize=5) for ((s,i), (t,j)) in roots_as_differences[xclass]])

    def plot_state(state):
            return sum([plot_object(x, color=r) for (x,r) in zip(state, rainbow(6))])
#+end_src

#+RESULTS:
[[file:/tmp/tmpqpw_mk23/tmp_oa6yc2hw.png]]



** Expansive motion of a state
#+begin_src sage 
  def expansive_motion(state):
      vvars = var('v01','v02','v11','v12','v21','v22','v31', 'v32')
      positive_roots = RS.root_lattice().positive_roots()
      V = matrix([[v01,v02],[v11,v12],[v21,v22],[v31,v32]])
      equations = []
      inequations = []
      for r in positive_roots:
          ramb = vector(RS.ambient_space()(r))
          v = (ramb*V).dot_product(ramb*central_charge_euclidean)
          inequations.append(vector([0]+[v.coefficient(variable) for variable in vvars]))
  
      for x in state:
           r = classes[x]
           ramb = vector(RS.ambient_space()(r))
           v = (ramb*V).dot_product(ramb*central_charge_euclidean)
           equations.append(vector([0]+[v.coefficient(variable) for variable in vvars]))
  
      P = Polyhedron(ieqs = [vector(QQ, v) for v in inequations] + [vector(QQ, v) for v in equations] + [-1*vector(QQ, v) for v in equations])
      return P
  
  def plot_motion(V):
      rays = []
      for i in range(0,4):
          base = vector(ambient_basis[i]) * central_charge_euclidean
          direction = vector(ambient_basis[i]) * V
          rays.append(arrow(base, base+direction, width=0.5, arrowsize=2, linestyle='dotted'))
          base = -vector(ambient_basis[i]) * central_charge_euclidean
          direction = -vector(ambient_basis[i]) * V
          rays.append(arrow(base, base+direction, color='red', width=0.5, arrowsize=1, linestyle='dotted'))
      return rays
    #+end_src

    #+RESULTS:
    :results:
    :end:

** Pictures of all the states
#+begin_src sage :results drawer 
  for s in states:
      [v01, v02, v11, v12, v21, v22, v31, v32] = vector(expansive_motion(s).rays()[0])
      V = matrix([[v01,v02],[v11,v12],[v21,v22],[v31,v32]])
      plot_state(s)
      print([(vector(ambient_basis[i])*V).dot_product(vector(ambient_basis[i])* central_charge_euclidean) for i in range(0,4)])
#+end_src

#+RESULTS:
:results:
file:/home/anandrd/.sage/temp/proteus/10935/tmp_s5d5t4ct.png
[19, 1, 13, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp__wq4443s.png]]
[-3/2, 12, 15/2, 3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_pepsfte2.png]]
[39/2, 39/2, 3/2, -3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_yd5ywzhg.png]]
[15, -1, 15, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_s2m3e8mf.png]]
[9, 15, -1, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp__xwdit5k.png]]
[1/2, 9/2, 3, -1/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_x1lkuqa0.png]]
[17/2, 0, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_ixrtj_g4.png]]
[9, 13, -1, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_jjt80igb.png]]
[13, 15, 1, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_uhwwcut2.png]]
[17/2, 0, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_fx2rd301.png]]
[9, 13, -1, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_ptto6ymn.png]]
[13, 15, 1, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_9t3eqxhp.png]]
[209/2, 11/2, 165/2, -11/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_e0vzo2_b.png]]
[45/2, -3/2, 39/2, 3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_pqbfrw_p.png]]
[11/2, 0, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_cb6l_fpu.png]]
[165/2, -11/2, 143/2, 11/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_ya_oghvj.png]]
[11/2, 0, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_1q23bz4b.png]]
[19, 1, 15, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_yx28qc00.png]]
[0, 77/2, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_jdl46lg9.png]]
[1, 9, 5, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_o4ntgohj.png]]
[-1/2, 4, 3, 1/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_snyy000l.png]]
[0, 7/2, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_2m3o92s7.png]]
[3/2, 27/2, 15/2, -3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_u7u4t6u8.png]]
[-1/2, 4, 3, 1/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_kbzv_kdm.png]]
[9, 13, 1, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_ehi97w6z.png]]
[13, 15, -1, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_9emh8orl.png]]
[0, 17, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_m49ngrl7.png]]
[13, 15, -1, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_k0sqwc4j.png]]
[0, 17, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_z1cgbtut.png]]
[9, 13, 1, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_d4y62b8a.png]]
[0, 0, 11/2, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_1aucokwc.png]]
[209/2, -11/2, 165/2, 11/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_z2j1lu0d.png]]
[15, 1, 13, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_ho197ipc.png]]
[0, 0, 11/2, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_4p28pzob.png]]
[19/2, -1/2, 15/2, 1/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_w0vareis.png]]
[45/2, 3/2, 39/2, -3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_7xnqzbay.png]]
[-1, 9, 5, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_jh7e8of2.png]]
[11/2, 44, 33, -11/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_3jqiql9v.png]]
[0, 0, 7, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_i3sc1an6.png]]
[1/2, 4, 3, -1/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_oapovzt1.png]]
[0, 0, 21/2, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_5uk_my8m.png]]
[-3/2, 27/2, 15/2, 3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_9ed66e6q.png]]
[13, 15, 1, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_stt0ffst.png]]
[17/2, 0, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_171x2_ea.png]]
[9, 13, -1, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp__mw9d418.png]]
[9, 13, -1, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_eqvitjf7.png]]
[13, 15, 1, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_w4sk8shd.png]]
[17/2, 0, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_ttjwdx1b.png]]
[45/2, -3/2, 39/2, 3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_r89dc12n.png]]
[11/2, 0, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_s525q81y.png]]
[209/2, 11/2, 165/2, -11/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_7fqcic7x.png]]
[209/2, 11/2, 165/2, -11/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_9lmi8g2a.png]]
[45/2, -3/2, 39/2, 3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_m1elrdop.png]]
[11/2, 0, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_agzvbiyr.png]]
[-1/2, 4, 3, 1/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_o16fyp23.png]]
[0, 7/2, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_iikqlx8x.png]]
[3/2, 27/2, 15/2, -3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_kg5cf7qs.png]]
[3/2, 27/2, 15/2, -3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_rxg5hzxa.png]]
[-1/2, 4, 3, 1/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_e38uyy1t.png]]
[0, 7/2, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_ibv33u2u.png]]
[13, 15, -1, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp__v92cexw.png]]
[0, 187/2, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_434d2x2i.png]]
[9, 13, 1, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_kaic_9or.png]]
[9, 13, 1, -1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_0ihf0006.png]]
[13, 15, -1, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_qnjg4dzx.png]]
[0, 17, 0, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_hgxs8nzm.png]]
[45/2, 3/2, 39/2, -3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_tlc8lwx3.png]]
[0, 0, 33/2, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_a0kpb7f2.png]]
[19, -1, 15, 1]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_ni16xi15.png]]
[19/2, -1/2, 15/2, 1/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_k2v9jldr.png]]
[45/2, 3/2, 39/2, -3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_pt3olkzt.png]]
[0, 0, 11/2, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_mvwvmzhu.png]]
[11/2, 44, 33, -11/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_e591iq30.png]]
[0, 0, 21/2, 0]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_i2pixez8.png]]
[-3/2, 27/2, 15/2, 3/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_rscn6jaz.png]]
[-11/2, 99/2, 55/2, 11/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp__4nmmb8g.png]]
[1/2, 4, 3, -1/2]
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_siciqikz.png]]
[0, 0, 21/2, 0]
:end:


* Squaring
#+begin_src sage :results file
  def square(pt):
      pt2 = (pt[0] + I*pt[1])^2
      return (real_part(pt2), imag_part(pt2))
  square_central_charge_plot = sum([point(square(central_charge_euclidean.rows()[i]), color=rainbow(4)[i], legend_label=str(i+1), size=100) for i in range(0,4)]) 
  square_central_charge_plot
#+end_src

#+RESULTS:
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_343eekei.png]]

#+begin_src sage :results file
  plot_state(states[0])
#+end_src

#+RESULTS:
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_mnwujijh.png]]


#+begin_src sage 
  Y = s3(s4(s1(s4(t3(t4(t2(t2(t4(P1)))))))))
  print(HN(Y,stab))
  print(states[5])
  #+end_src

#+RESULTS:
: <string>:40: DeprecationWarning: the output of uniq(X) being sorted is deprecated; use sorted(set(X)) instead if you want sorted output
: See https://trac.sagemath.org/27014 for details.
: [[3]: P1<4>+P2<4> → P4<5> :[4], [1]: P3<2> → P4<3> :[2], [2]: P2<2> :[2], [0]: P1<0>+P3<0> → P4<1> :[1], [0]: P1<0> → P4<1> :[1], [-1]: P1<-2> :[-1], [-3]: P3<-4> → P4<-3> :[-2]]
: [X2, X1, Y2, Y3, Z1, Z3]
#+begin_src sage :results file
  plot_state(states[5]) + central_charge_plot
#+end_src

#+RESULTS:
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_wfdl5j2v.png]]

#+begin_src sage :results file
  square_central_charge_plot
#+end_src

#+RESULTS:
[[file:/home/anandrd/.sage/temp/proteus/10935/tmp_c474l1wi.png]]

#+RESULTS:
: <string>:40: DeprecationWarning: the output of uniq(X) being sorted is deprecated; use sorted(set(X)) instead if you want sorted output
: See https://trac.sagemath.org/27014 for details.
: 5

* HN filtrations and pulling tight
First evaluate the code in [[*Visualizing a state][Visualizing a state]].

We take an object, draw a curve, pull it tight, and compare with the HN filtration.
#+begin_src  sage :results file
  X = s1(t4(t3(t2(t4(P1)))))
  plot_state([objects[i] for i in support(t2(t4(P1)), stab)])
#+end_src

#+RESULTS:
[[file:/tmp/tmpqpw_mk23/tmp_jpgkwchy.png]]

#+begin_src sage :results file
  plot_object(Y1)+central_charge_plot
#+end_src

#+RESULTS:
[[file:/tmp/tmpqpw_mk23/tmp_bhrcaccy.png]]

