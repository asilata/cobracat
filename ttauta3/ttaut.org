* Generation of supports and states

  #+begin_src python
    vertices = [1,2,3,4]
    edges = {"a":(1,2), "b":(2,3), "c":(3,4), "d":(4,1), "x": (1,3), "y": (2,4)}

    supports = [tuple(s) for s in Subsets(edges.keys(),4) if not ("x" in s and "y" in s) and ("x"in s or "y" in s)]

    def states(support):
	incidences = {v:[e for e in support if v in edges[e]] for v in vertices}
	unpruned =  [(support, (l1,l2,l3,l4)) for l1 in incidences[1] for l2 in incidences[2] for l3 in incidences[3] for l4 in incidences[4]]
	pruned = [(x,y) for (x,y) in unpruned if len(uniq(sorted(y))) < 4] # must have a dumb-bell 
	return pruned

    def stateToString(state):
	return ''.join(state[0]) + "-" + ''.join(state[1])

    out = [[stateToString(state) for state in states(support)] for support in supports]

  #+end_src

* The graph  
  #+begin_src dot :file ttauta3.svg :exports results
    digraph ttauta3 {
    # Vertices
	    "abcy-aacy"[image="abcy-aacy.png", label=""];
	    "abcy-aacc"[image="abcy-aacc.png", label=""];
	    "abcy-aaby"[image="abcy-aaby.png", label=""];
	    "abcy-aabc"[image="abcy-aabc.png", label=""];
	    "abcy-aycy"[image="abcy-aycy.png", label=""];
	    "abcy-aycc"[image="abcy-aycc.png", label=""];
	    "abcy-ayby"[image="abcy-ayby.png", label=""];
	    "abcy-abcc"[image="abcy-abcc.png", label=""];
	    "abcy-abby"[image="abcy-abby.png", label=""];
	    "abcy-abbc"[image="abcy-abbc.png", label=""];

	    "abcx-aaxc"[image="abcx-aaxc.png", label=""];
	    "abcx-aacc"[image="abcx-aacc.png", label=""];
	    "abcx-aabc"[image="abcx-aabc.png", label=""];
	    "abcx-abcc"[image="abcx-abcc.png", label=""];
	    "abcx-abbc"[image="abcx-abbc.png", label=""];
	    "abcx-xaxc"[image="abcx-xaxc.png", label=""];
	    "abcx-xacc"[image="abcx-xacc.png", label=""];
	    "abcx-xbxc"[image="abcx-xbxc.png", label=""];
	    "abcx-xbcc"[image="abcx-xbcc.png", label=""];
	    "abcx-xbbc"[image="abcx-xbbc.png", label=""];

	    "acdy-aacy"[image="acdy-aacy.png", label=""];
	    "acdy-aacc"[image="acdy-aacc.png", label=""];
	    "acdy-aacd"[image="acdy-aacd.png", label=""];
	    "acdy-aycy"[image="acdy-aycy.png", label=""];
	    "acdy-aycc"[image="acdy-aycc.png", label=""];
	    "acdy-dacc"[image="acdy-dacc.png", label=""];
	    "acdy-dacd"[image="acdy-dacd.png", label=""];
	    "acdy-dycy"[image="acdy-dycy.png", label=""];
	    "acdy-dycc"[image="acdy-dycc.png", label=""];
	    "acdy-dycd"[image="acdy-dycd.png", label=""];

	    "acdx-aaxc"[image="acdx-aaxc.png", label=""];
	    "acdx-aaxd"[image="acdx-aaxd.png", label=""];
	    "acdx-aacc"[image="acdx-aacc.png", label=""];
	    "acdx-aacd"[image="acdx-aacd.png", label=""];
	    "acdx-xaxc"[image="acdx-xaxc.png", label=""];
	    "acdx-xaxd"[image="acdx-xaxd.png", label=""];
	    "acdx-xacc"[image="acdx-xacc.png", label=""];
	    "acdx-daxd"[image="acdx-daxd.png", label=""];
	    "acdx-dacc"[image="acdx-dacc.png", label=""];
	    "acdx-dacd"[image="acdx-dacd.png", label=""];

	    "abdy-aaby"[image="abdy-aaby.png", label=""];
	    "abdy-aabd"[image="abdy-aabd.png", label=""];
	    "abdy-ayby"[image="abdy-ayby.png", label=""];
	    "abdy-abby"[image="abdy-abby.png", label=""];
	    "abdy-abbd"[image="abdy-abbd.png", label=""];
	    "abdy-dabd"[image="abdy-dabd.png", label=""];
	    "abdy-dyby"[image="abdy-dyby.png", label=""];
	    "abdy-dybd"[image="abdy-dybd.png", label=""];
	    "abdy-dbby"[image="abdy-dbby.png", label=""];
	    "abdy-dbbd"[image="abdy-dbbd.png", label=""];

	    "abdx-aaxd"[image="abdx-aaxd.png", label=""];
	    "abdx-aabd"[image="abdx-aabd.png", label=""];
	    "abdx-abbd"[image="abdx-abbd.png", label=""];
	    "abdx-xaxd"[image="abdx-xaxd.png", label=""];
	    "abdx-xbxd"[image="abdx-xbxd.png", label=""];
	    "abdx-xbbd"[image="abdx-xbbd.png", label=""];
	    "abdx-daxd"[image="abdx-daxd.png", label=""];
	    "abdx-dabd"[image="abdx-dabd.png", label=""];
	    "abdx-dbxd"[image="abdx-dbxd.png", label=""];
	    "abdx-dbbd"[image="abdx-dbbd.png", label=""];

	    "bcdy-dycy"[image="bcdy-dycy.png", label=""];
	    "bcdy-dycc"[image="bcdy-dycc.png", label=""];
	    "bcdy-dycd"[image="bcdy-dycd.png", label=""];
	    "bcdy-dyby"[image="bcdy-dyby.png", label=""];
	    "bcdy-dybd"[image="bcdy-dybd.png", label=""];
	    "bcdy-dbcc"[image="bcdy-dbcc.png", label=""];
	    "bcdy-dbcd"[image="bcdy-dbcd.png", label=""];
	    "bcdy-dbby"[image="bcdy-dbby.png", label=""];
	    "bcdy-dbbc"[image="bcdy-dbbc.png", label=""];
	    "bcdy-dbbd"[image="bcdy-dbbd.png", label=""];

	    "bcdx-xbxc"[image="bcdx-xbxc.png", label=""];
	    "bcdx-xbxd"[image="bcdx-xbxd.png", label=""];
	    "bcdx-xbcc"[image="bcdx-xbcc.png", label=""];
	    "bcdx-xbbc"[image="bcdx-xbbc.png", label=""];
	    "bcdx-xbbd"[image="bcdx-xbbd.png", label=""];
	    "bcdx-dbxd"[image="bcdx-dbxd.png", label=""];
	    "bcdx-dbcc"[image="bcdx-dbcc.png", label=""];
	    "bcdx-dbcd"[image="bcdx-dbcd.png", label=""];
	    "bcdx-dbbc"[image="bcdx-dbbc.png", label=""];
	    "bcdx-dbbd"[image="bcdx-dbbd.png", label=""];

    # Edges
    # ----------------------------------------------------------------------------------------------------
    "abcx-aaxc" -> "abcx-aabc" [taillabel="sa", label="b>c", labeltooltip="a:a+x-b-c; b:a; c:c; x:b-c",url=""];

    # Its rotations 
    "bcdy-dbby" -> "bcdy-dbbc" [taillabel="sb", label="c>d", labeltooltip="b:b+y-c-d; c:b; d:d; y:c-d",url=""];
    "acdx-xacc" -> "acdx-dacc" [taillabel="sc", label="d>a", labeltooltip="c:c+x-d-a; d:c; a:a; x:d-a",url=""];
    "abdy-dybd" -> "abdy-dabd" [taillabel="sd", label="a>b", labeltooltip="d:d+y-a-b; a:d; b:b; y:a-b",url=""];

    # and flips
    # ----------------------------------------------------------------------------------------------------
    "abcx-aaxc" -> "abcy-aabc" [taillabel="sa", label="c>b; b>c-b", labeltooltip="a:a+x; b:a; c:b; y:c-b",url=""];
    "bcdy-dbby" -> "bcdx-dbbc" [taillabel="sb", label="d>c; c>d-c", labeltooltip="b:b+y; c:b; d:c; x:d-c",url=""];
    "acdx-xacc" -> "acdy-dacc" [taillabel="sc", label="a>d; d>a-d", labeltooltip="c:c+x; d:c; a:d; y:a-d",url=""];
    "abdy-dybd" -> "abdx-dabd" [taillabel="sd", label="b>a; a>b-a", labeltooltip="d:d+y; a:d; b:a; x:b-a",url=""];
    "abcy-aycc" -> "abcx-abcc" [taillabel="tc", label="a>b; b>a-b", labeltooltip="c:c+y; b:c; a:b; x:a-b",url=""];
    "abdx-xbbd" -> "abdy-abbd" [taillabel="tb", label="d>a; a>d-a", labeltooltip="b:b+x; a:b; d:a; y:d-a",url=""];
    "acdy-aacy" -> "acdx-aacd" [taillabel="ta", label="c>d; d>c-d", labeltooltip="a:a+y; d:a; c:d; x:c-d",url=""];
    "bcdx-dbxd" -> "bcdy-dbcd" [taillabel="td", label="b>c; c>b-c", labeltooltip="d:d+x; c:d; b:c; y:b-c",url=""];
    #----------------------------------------------------------------------------------------------------
    "abcx-aaxc" -> "abcy-aaby" [taillabel="sa", label="c>b; c-b>b", labeltooltip="a:a+x; b:a; c:b; y:c-b",url=""];
    "bcdy-dbby" -> "bcdx-xbbc" [taillabel="sb", label="d>c; d-c>c", labeltooltip="b:b+y; c:b; d:c; x:d-c",url=""];
    "acdx-xacc" -> "acdy-dycc" [taillabel="sc", label="a>d; a-d>d", labeltooltip="c:c+x; d:c; a:d; y:a-d",url=""];
    "abdy-dybd" -> "abdx-daxd" [taillabel="sd", label="b>a; b-a>a", labeltooltip="d:d+y; a:d; b:a; x:b-a",url=""];
    "abcy-aycc" -> "abcx-xbcc" [taillabel="tc", label="a>b; a-b>b", labeltooltip="c:c+y; b:c; a:b; x:a-b",url=""];
    "abdx-xbbd" -> "abdy-abby" [taillabel="tb", label="d>a; d-a>a", labeltooltip="b:b+x; a:b; d:a; y:d-a",url=""];
    "acdy-aacy" -> "acdx-aaxd" [taillabel="ta", label="c>d; c-d>d", labeltooltip="a:a+y; d:a; c:d; x:c-d",url=""];
    "bcdx-dbxd" -> "bcdy-dycd" [taillabel="td", label="b>c; b-c>c", labeltooltip="d:d+x; c:d; b:c; y:b-c",url=""];
    #----------------------------------------------------------------------------------------------------
    "abcx-aaxc" -> "abcx-abxd" [taillabel="ta", label="b>a-b+x", labeltooltip="a:b; b:x+c; c:c; x:a-b+x",url=""];
    "bcdy-dbby" -> "bcdy-abcy" [taillabel="tb", label="c>b-c+y", labeltooltip="b:c; c:y+d; d:d; y:b-c+y",url=""];
    "acdx-xacc" -> "acdx-xbcd" [taillabel="tc", label="d>c-d+x", labeltooltip="c:d; d:x+a; a:a; x:c-d+x",url=""];
    "abdy-dybd" -> "abdy-aycd" [taillabel="td", label="a>d-a+y", labeltooltip="d:a; a:y+b; b:b; y:d-a+y",url=""];
    "abcy-aycc" -> "abcy-dybc" [taillabel="sc", label="b>c-b+y", labeltooltip="c:b; b:y+a; a:a; y:c-b+y",url=""];
    "abdx-xbbd" -> "abdx-xabc" [taillabel="sb", label="a>b-a+x", labeltooltip="b:a; a:x+d; d:d; x:b-a+x",url=""];
    "acdy-aacy" -> "acdy-daby" [taillabel="sa", label="d>a-d+y", labeltooltip="a:d; d:y+c; c:c; y:a-d+y",url=""];
    "bcdx-dbxd" -> "bcdx-daxc" [taillabel="sd", label="c>d-c+x", labeltooltip="d:c; c:x+b; b:b; x:d-c+x",url=""];
    #----------------------------------------------------------------------------------------------------
    "abcx-aaxc" -> "abcx-xbxd" [taillabel="ta", label="b>a-b+x", labeltooltip="a:b; b:x+c; c:c; x:a-b+x",url=""];
    "bcdy-dbby" -> "bcdy-aycy" [taillabel="tb", label="c>b-c+y", labeltooltip="b:c; c:y+d; d:d; y:b-c+y",url=""];
    "acdx-xacc" -> "acdx-xbxd" [taillabel="tc", label="d>c-d+x", labeltooltip="c:d; d:x+a; a:a; x:c-d+x",url=""];
    "abdy-dybd" -> "abdy-aycy" [taillabel="td", label="a>d-a+y", labeltooltip="d:a; a:y+b; b:b; y:d-a+y",url=""];
    "abcy-aycc" -> "abcy-dyby" [taillabel="sc", label="b>c-b+y", labeltooltip="c:b; b:y+a; a:a; y:c-b+y",url=""];
    "abdx-xbbd" -> "abdx-xaxc" [taillabel="sb", label="a>b-a+x", labeltooltip="b:a; a:x+d; d:d; x:b-a+x",url=""];
    "acdy-aacy" -> "acdy-dyby" [taillabel="sa", label="d>a-d+y", labeltooltip="a:d; d:y+c; c:c; y:a-d+y",url=""];
    "bcdx-dbxd" -> "bcdx-xaxc" [taillabel="sd", label="c>d-c+x", labeltooltip="d:c; c:x+b; b:b; x:d-c+x",url=""];
    #----------------------------------------------------------------------------------------------------
    "abcx-aaxc" -> "abcx-aacc" [taillabel="sc", label=" ", labeltooltip="a:a; b:b; x:x; c:a+b+c+x",url=""];
    "bcdy-dbby" -> "bcdy-dbbd" [taillabel="sd", label=" ", labeltooltip="b:b; c:c; y:y; d:b+c+d+y",url=""];
    "acdx-xacc" -> "acdx-aacc" [taillabel="sa", label=" ", labeltooltip="c:c; d:d; x:x; a:c+d+a+x",url=""];
    "abdy-dybd" -> "abdy-dbbd" [taillabel="sb", label=" ", labeltooltip="d:d; a:a; y:y; b:d+a+b+y",url=""];
    "abcy-aycc" -> "abcy-aacc" [taillabel="ta", label=" ", labeltooltip="c:c; b:b; y:y; a:c+b+a+y",url=""];
    "abdx-xbbd" -> "abdx-dbbd" [taillabel="td", label=" ", labeltooltip="b:b; a:a; x:x; d:b+a+d+x",url=""];
    "acdy-aacy" -> "acdy-aacc" [taillabel="tc", label=" ", labeltooltip="a:a; d:d; y:y; c:a+d+c+y",url=""];
    "bcdx-dbxd" -> "bcdx-dbbd" [taillabel="tb", label=" ", labeltooltip="d:d; c:c; x:x; b:d+c+b+x",url=""];
    #----------------------------------------------------------------------------------------------------
    "abcx-aaxc" -> "abdy-aabd" [taillabel="tc", label="b>c", labeltooltip="a:a; b:c; d: x; y:b-c", url=""];
    "bcdy-dbby" -> "abcx-abbc" [taillabel="td", label="c>d", labeltooltip="b:b; c:d; a: y; x:c-d", url=""];
    "acdx-xacc" -> "bcdy-dbcc" [taillabel="ta", label="d>a", labeltooltip="c:c; d:a; b: x; y:d-a", url=""];
    "abdy-dybd" -> "acdx-dacd" [taillabel="tb", label="a>b", labeltooltip="d:d; a:b; c: y; x:a-b", url=""];
    "abcy-aycc" -> "bcdx-dbcc" [taillabel="sa", label="b>a", labeltooltip="c:c; b:a; d: y; x:b-a", url=""];
    "abdx-xbbd" -> "abcy-abbc" [taillabel="sd", label="a>d", labeltooltip="b:b; a:d; c: x; y:a-d", url=""];
    "acdy-aacy" -> "abdx-aabd" [taillabel="sc", label="d>c", labeltooltip="a:a; d:c; b: y; x:d-c", url=""];
    "bcdx-dbxd" -> "acdy-dacd" [taillabel="sb", label="c>b", labeltooltip="d:d; c:b; a: x; y:c-b", url=""];
    #----------------------------------------------------------------------------------------------------

    }

  #+end_src

  #+RESULTS:
  [[file:ttauta3.svg]]

* Helper functions  

  #+begin_src elisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((dot . t))) ; this line activates dot

    (defun rotate (x)
      (cond
       ((equal x ?a) ?b)
       ((equal x ?b) ?c)
       ((equal x ?c) ?d)
       ((equal x ?d) ?a)
       ((equal x ?x) ?y)
       ((equal x ?y) ?x)
       (t x)))

    (defun flip (x)
      (cond
       ((equal x ?a) ?c)
       ((equal x ?b) ?b)
       ((equal x ?c) ?a)
       ((equal x ?d) ?d)
       ((equal x ?x) ?y)
       ((equal x ?y) ?x)
       ((equal x ?s) ?t)
       ((equal x ?t) ?s)
       (t x)))

    (defun rotate-state (s)
      (let* ((support-loops (split-string s "-"))
	     (support (nth 0 support-loops))
	     (loops (nth 1 support-loops))
	     (new-support (sort (mapcar 'rotate support) '<))
	     (new-loops-pre (mapcar 'rotate loops))
	     (new-loops (mapcar (lambda (n) (nth n new-loops-pre)) '(3 0 1 2))))
	(concat (concat new-support)
		"-"
		(concat new-loops))))

    (defun flip-state (s)
      (let* ((support-loops (split-string s "-"))
	     (support (nth 0 support-loops))
	     (loops (nth 1 support-loops))
	     (new-support (sort (mapcar 'flip support) '<))
	     (new-loops-pre (mapcar 'flip loops))
	     (new-loops (mapcar (lambda (n) (nth n new-loops-pre)) '(3 2 1 0))))
	(concat (concat new-support)
		"-"
		(concat new-loops))))

    (defun mapcar-string (transformation string)
      (concat (mapcar transformation string)))

(fset 'rotate-line
   [?\C-  ?\C-e ?\M-w ?\C-n ?\C-y ?\C-a ?\C-s ?\" ?\C-b ?\C-  ?\C-f ?\C-s ?\" ?\C-f ?\C-b ?\C-w ?\C-u ?\M-: ?\( ?r ?o ?t ?a ?t ?e ?- ?s ?t ?a ?t ?e ?  ?\C-y ?\) return ?\C-s ?\" ?\C-b ?\C-  ?\C-s ?\" ?\C-s ?\C-f ?\C-b ?\C-w ?\C-u ?\M-: ?\( ?r ?o ?t ?a ?t ?e ?- ?s ?t ?a ?t ?e ?  ?\C-y ?\) return ?\C-s ?\" ?\C-b ?\C-  ?\C-s ?\" ?\C-f ?\C-f ?\C-b ?\C-b ?\C-s ?\" ?\C-f ?\C-b ?\C-w ?\C-u ?\M-: ?\( ?m ?a ?p ?c ?a ?r ?  ?\' ?r ?o ?t ?a ?t ?e ?\C-b ?\C-b ?\C-b ?\C-b ?\C-b ?\C-b ?\C-b ?\C-b ?- ?s ?t ?r ?i ?n ?g ?\C-e ?  ?\C-y ?\) return ?\C-s ?\" ?\C-b ?\C-  ?\C-s ?\" ?\C-f ?\C-s ?\C-s ?\C-f ?\C-b ?\C-w ?\C-u ?\M-: ?\( ?m ?a ?p ?c ?a ?r ?- ?s ?t ?r ?i ?n ?g ?  ?\' ?r ?o ?t ?a ?t ?e ?  ?\C-y ?\) return ?\C-s ?\" ?\C-b ?\C-s ?\" ?\C-s ?\C-  ?\C-b ?\C-b ?\C-b ?\C-r ?\" ?\C-b ?\C-f ?\C-w ?\C-u ?\M-: ?\( ?m ?a ?p ?c ?a ?r ?- ?s ?t ?r ?i ?n ?g ?  ?\' ?r ?o ?t ?a ?t ?e ?  ?\C-y ?\) return ?\C-e ?\C-a])

(fset 'flip-line
   [?\C-  ?\C-e ?\M-w ?\C-n ?\C-y ?\C-a ?\C-s ?\" ?\C-b ?\C-  ?\C-f ?\C-s ?\" ?\C-f ?\C-b ?\C-w ?\C-u ?\M-: ?\( ?f ?l ?i ?p ?- ?s ?t ?a ?t ?e ?  ?\C-y ?\) ?\C-m ?\C-s ?\" ?\C-b ?\C-  ?\C-s ?\" ?\C-s ?\C-f ?\C-b ?\C-w ?\C-u ?\M-: ?\( ?f ?l ?i ?p ?- ?s ?t ?a ?t ?e ?  ?\C-y ?\) ?\C-m ?\C-s ?\" ?\C-b ?\C-  ?\C-s ?\" ?\C-f ?\C-f ?\C-b ?\C-b ?\C-s ?\" ?\C-f ?\C-b ?\C-w ?\C-u ?\M-: ?\( ?m ?a ?p ?c ?a ?r ?- ?s ?t ?r ?i ?n ?g ?  ?\' ?f ?l ?i ?p ?  ?\C-y ?\) ?\C-m ?\C-s ?\" ?\C-b ?\C-  ?\C-s ?\" ?\C-f ?\C-s ?\C-s ?\C-f ?\C-b ?\C-w ?\C-u ?\M-: ?\( ?m ?a ?p ?c ?a ?r ?- ?s ?t ?r ?i ?n ?g ?  ?\' ?f ?l ?i ?p ?  ?\C-y ?\) ?\C-m ?\C-s ?\" ?\C-b ?\C-s ?\" ?\C-s ?\C-  ?\C-b ?\C-b ?\C-b ?\C-r ?\" ?\C-b ?\C-f ?\C-w ?\C-u ?\M-: ?\( ?m ?a ?p ?c ?a ?r ?- ?s ?t ?r ?i ?n ?g ?  ?\' ?f ?l ?i ?p ?  ?\C-y ?\) ?\C-m ?\C-e ?\C-a])
   #+end_src

   #+RESULTS:
   : mapcar-string
